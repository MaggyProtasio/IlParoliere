Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n\n        //Oggetti e variabili\n        Dizionario diz = new Dizionario();\n        Scanner in = new Scanner(System.in);\n        String nickname;\n        String parolaInserita = \"\";\n\n        //creazione utente\n        System.out.println(\"Benvenuto nel paroliere!\");\n        System.out.println(\"Inserisci il nickname\");\n        nickname = in.nextLine();\n\n        Utente giocatore = new Utente(nickname);\n        Partita partita = new Partita(giocatore);\n\n        //creazione partita\n        System.out.println(\"Inzia giocare!\");\n        int i = 0;\n        do {\n            System.out.println(\"Parola \" + (i+1) + \" \\nInserisci una parola\");\n            parolaInserita = in.nextLine();\n            //trova parola\n            if(diz.trovaParola(parolaInserita)){\n                    if(partita.doppione(parolaInserita) == false){\n                        System.out.println(\"Parola trovata nel dizionario!\");\n                        partita.aggiungiPunti(parolaInserita);\n                        System.out.println(\"Punti della parola: \"+partita.puntiParola(parolaInserita));\n                        //contatore\n                        partita.contaParola();\n                    }else{\n                        System.out.println(\"Hai giÃ  inserito questa parola >:(\");\n                    }\n            }else{\n                System.out.println(\"Questa parola non esiste nel dizionario >:(\");\n            }\n            i++;\n        }while(i < 5);\n        System.out.println(\"Punti della parita: \"+partita.getPuntiTotali());\n        System.out.println(\"Parole trovate: \"+partita.getParolaNum());\n        //stampa la prima parola inserita migliore\n        partita.controllaParolaMigliore();\n        System.out.println(\"Parola migliore: \"+partita.getParolaMigliore());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	
@@ -1,5 +1,6 @@
 import java.awt.*;
 import java.io.*;
+import java.util.Random;
 import java.util.Scanner;
 
 public class Main {
@@ -11,6 +12,7 @@
         Scanner in = new Scanner(System.in);
         String nickname;
         String parolaInserita = "";
+        Random rand = new Random();
 
         //creazione utente
         System.out.println("Benvenuto nel paroliere!");
@@ -20,6 +22,13 @@
         Utente giocatore = new Utente(nickname);
         Partita partita = new Partita(giocatore);
 
+        //provaAAAAAAAAAA
+        partita.matriceRandomInizio();
+        partita.stampaTabellone();
+        String[] dizionario = diz.leggiParole();
+        partita.inserisciParoleMatrice(dizionario);
+        partita.stampaTabellone();
+
         //creazione partita
         System.out.println("Inzia giocare!");
         int i = 0;
Index: src/Dizionario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\nimport java.util.Scanner; // Import the Scanner class to read text files\n\npublic class Dizionario {\n    private String parola;\n\n    public Dizionario() {\n\n    }\n\n    public String getParola() {\n        return parola;\n    }\n\n    public void setParola(String parola) {\n        this.parola = parola;\n    }\n\n    public boolean trovaParola(String p){\n        boolean b = false;\n        try {\n            String filePath = \"src/dictionary.txt\"; // filename and Main.java are in the same folder\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            String line = reader.readLine();\n            while (line != null) {\n                if(p.equals(line)){\n                    System.out.println(line+\" - trovato :D\");\n                    b = true;\n                    break;\n                }\n                line = reader.readLine();\n            }\n            System.out.println(\"FINE\");\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return b;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Dizionario.java b/src/Dizionario.java
--- a/src/Dizionario.java	
+++ b/src/Dizionario.java	
@@ -3,6 +3,7 @@
 
 public class Dizionario {
     private String parola;
+    String[] words = new String[661563]; // parole in file NON MODIFICARE
 
     public Dizionario() {
 
@@ -37,4 +38,49 @@
         }
         return b;
     }
-}
+
+    public boolean stampaParole(String p){
+        boolean b = false;
+        try {
+            String filePath = "src/dictionary.txt"; // filename and Main.java are in the same folder
+            BufferedReader reader = new BufferedReader(new FileReader(filePath));
+            String line = reader.readLine();
+            while (line != null) {
+                if(p.equals(line)){
+                    System.out.println(line+" - trovato :D");
+                    b = true;
+                    break;
+                }
+                line = reader.readLine();
+            }
+            System.out.println("FINE");
+            reader.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return b;
+    }
+
+    public String[] leggiParole() {
+            String filePath = "src/dictionary.txt"; // filename and Main.java are in the same folder
+            File file = new File(filePath);
+            try {
+                Scanner scanner = new Scanner(file);
+                int i = 0;
+                while (scanner.hasNextLine()) {
+                    String line = scanner.nextLine();
+                    String[] lineWords = line.split(" "); // Split della riga
+                    for (String word : lineWords) {
+                        words[i] = word; // metti parola in array wors
+                        i++;
+                    }
+                }
+                scanner.close();
+                // Now you can use the 'words' array to process the words as needed
+               // System.out.println("parole totali: " + i);
+            } catch (FileNotFoundException e) {
+                e.printStackTrace();
+            }
+            return words;
+        }
+    }
Index: src/Partita.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Vector;\n\npublic class Partita {\n    public int puntiTotali;\n    public Utente utente;\n    public String parolaMigliore;\n    public int parolaNum;\n\n    Vector<String> paroleArray= new Vector<>();\n\n    //costruttore\n    public Partita(Utente u){\n        this.utente = utente;\n        this.puntiTotali = 0;\n        this.parolaMigliore = null;\n    }\n\n    // getter e setter\n    public int getPuntiTotali() {\n        return puntiTotali;\n    }\n    public void setPuntiTotali(int puntiTotali) {\n        this.puntiTotali = puntiTotali;\n    }\n    public Utente getUtente() {\n        return utente;\n    }\n    public void setUtente(Utente utente) {\n        this.utente = utente;\n    }\n    public String getParolaMigliore() {\n        return parolaMigliore;\n    }\n    public void setParolaMigliore(String parolaMigliore) {\n        this.parolaMigliore = parolaMigliore;\n    }\n    public int getParolaNum() {\n        return parolaNum;\n    }\n    public void setParolaNum(int parolaNum) {\n        this.parolaNum = parolaNum;\n    }\n\n    //metodi\n    public void aggiungiPunti(String parola){\n        int lunghezzaParola = parola.length();\n        int k = 100;            //costante\n        int punti = lunghezzaParola * k;\n        puntiTotali = puntiTotali + punti;\n    }\n    public boolean controllaParolaMigliore() {\n        String best = \"\";\n        boolean unique = true;\n        Iterator<String> i = paroleArray.iterator();\n        while (i.hasNext()) {\n            String parola = i.next();\n            if (parola.length() > best.length()) {\n                best = parola;\n                unique = true;\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\n                unique = false;\n            }\n        }\n        setParolaMigliore(best);\n        return unique;\n    }\n\n    public int puntiParola(String parola){\n        int lunghezzaParola = parola.length();\n        int k = 100;            //costante\n        int punti = lunghezzaParola * k;\n        paroleArray.add(parola);\n        return punti;\n    }\n\n    public void contaParola(){\n        parolaNum++;\n    }\n\n    public boolean doppione(String parolaInserita){\n        boolean d = false; //doppione\n        int size = paroleArray.size(); //grandezza array\n        for(int x=0; x<size; x++){ //ciclo vettore grande\n            if(parolaInserita.equals(paroleArray.get(x))){\n                d = true;\n            }\n        }\n        return d;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Partita.java b/src/Partita.java
--- a/src/Partita.java	
+++ b/src/Partita.java	
@@ -1,5 +1,10 @@
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
 import java.util.Arrays;
 import java.util.Iterator;
+import java.util.Random;
 import java.util.Vector;
 
 public class Partita {
@@ -8,7 +13,12 @@
     public String parolaMigliore;
     public int parolaNum;
 
+    static char[][] tabellone = new char[6][6];
+    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
+            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/
+
     Vector<String> paroleArray= new Vector<>();
+    Vector<String> paroleArray2= new Vector<>();
 
     //costruttore
     public Partita(Utente u){
@@ -89,4 +99,185 @@
         }
         return d;
     }
+
+    /*public void inizializzaTabellone(){
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 6; j++) {
+                int index = (int) (Math.random() * lettere.length);
+                tabellone[i][j] = lettere[index];
+            }
+        }
+    }*/
+
+    public void stampaTabellone(){
+        for (int i = 0; i < 6; i++) {
+            for (int j = 0; j < 6; j++) {
+                System.out.print(tabellone[i][j] + " ");
+            }
+            System.out.println();
+        }
+    }
+
+    //metodo per creare un vettore inizializato con lettere casuali
+    public void matriceRandomInizio(){
+        Random rand = new Random();
+        // riempimento casuale della matrice con lettere dell'alfabeto
+        for (int i = 0; i < tabellone.length; i++) {
+            for (int j = 0; j < tabellone[i].length; j++) {
+                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo
+                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));
+            }
+        }
+    }
+
+    // controlla se Ã¨ possibile inserire una parola nella matrice in una determinata posizione e direzione
+    public static boolean canInsertWord(String word, int row, int col, int dir) {
+        int dx = 0;
+        int dy = 0;
+        if (dir == 0) {
+            dy = 1;
+        } else if (dir == 1) {
+            dx = 1;
+            dy = 1;
+        } else if (dir == 2) {
+            dx = 1;
+        } else if (dir == 3) {
+            dx = 1;
+            dy = -1;
+        } else if (dir == 4) {
+            dy = -1;
+        } else if (dir == 5) {
+            dx = -1;
+            dy = -1;
+        } else if (dir == 6) {
+            dx = -1;
+        } else if (dir == 7) {
+            dx = -1;
+            dy = 1;
+        }
+        int x = col;
+        int y = row;
+        for (int i = 0; i < word.length(); i++) {
+            // controlla se la posizione Ã¨ all'interno della matrice
+            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {
+                return false;
+            }
+
+            // controlla se la posizione Ã¨ giÃ  occupata da un'altra lettera
+            if (tabellone[y][x] != '\u0000' && tabellone[y][x] != word.charAt(i)) {
+                System.out.println("La posizione (" + y + ", " + x + ") Ã¨ giÃ  occupata da " + tabellone[y][x] + " e non da " + word.charAt(i));
+                return false;
+            }
+            x += dx;
+            y += dy;
+        }
+        return true;
+    }
+    
+    // inserisce una parola nella matrice in una determinata posizione e direzione
+    public static void inserisciParola(String word, int row, int col, int dir) {
+        int dx = 0;
+        int dy = 0;
+        if (dir == 0) {
+            dy = 1;
+        } else if (dir == 1) {
+            dx = 1;
+            dy = 1;
+        } else if (dir == 2) {
+            dx = 1;
+        } else if (dir == 3) {
+            dx = 1;
+            dy = -1;
+        } else if (dir == 4) {
+            dy = -1;
+        } else if (dir == 5) {
+            dx = -1;
+            dy = -1;
+        } else if (dir == 6) {
+            dx = -1;
+        } else if (dir == 7) {
+            dx = -1;
+            dy = 1;
+        }
+        int x = col;
+        int y = row;
+        for (int i = 0; i < word.length(); i++) {
+            tabellone[y][x] = word.charAt(i);
+            x += dx;
+            y += dy;
+        }
+    }
+
+    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file
+    public void inserisciParoleMatrice(String words[]){
+        Random rand = new Random();
+        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola
+        for (String word : words) {
+            boolean inserted = false;
+            int tentativi = 0;
+            while (!inserted && tentativi < maxTentativi) {
+                int row = rand.nextInt(tabellone.length);
+                int col = rand.nextInt(tabellone[row].length);
+                int dir = rand.nextInt(8);
+                if (canInsertWord(word, row, col, dir)) {
+                    inserisciParola(word, row, col, dir);
+                    inserted = true;
+                }
+                tentativi++;
+            }
+            if (!inserted) {
+                System.out.println("Non Ã¨ stato possibile inserire la parola " + word);
+            }
+        }
+    }
+
+    /*public static void inizializzaMatrice(String[] parole) {
+        Random random = new Random();
+        int i, j, k;
+        for (String parola : parole) {
+            if (parola.length() >= 3 && parola.length() <= 6) {
+                boolean piazzata = false;
+                while (!piazzata) {
+                    i = random.nextInt(6);
+                    j = random.nextInt(6);
+                    k = random.nextInt(8);
+                    if (tabellone[i][j] == '\0') {
+                        tabellone[i][j] = parola.charAt(0);
+                        int x = i + dx[k];
+                        int y = j + dy[k];
+                        boolean ok = true;
+                        for (int l = 1; l < parola.length(); l++) {
+                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {
+                                if (tabellone[x][y] == '\0') {
+                                    tabellone[x][y] = parola.charAt(l);
+                                    x += dx[k];
+                                    y += dy[k];
+                                } else {
+                                    ok = false;
+                                    break;
+                                }
+                            } else {
+                                ok = false;
+                                break;
+                            }
+                        }
+                        if (ok) {
+                            Dizionario d = new Dizionario();
+                            d.setParola(parola);
+                            paroleArray.add(d);
+                            piazzata = true;
+                        } else {
+                            for (int l = 0; l < parola.length(); l++) {
+                                if (tabellone[i][j] == parola.charAt(l)) {
+                                    tabellone[i][j] = '\0';
+                                }
+                                i -= dx[k];
+                                j -= dy[k];
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }*/
 }
