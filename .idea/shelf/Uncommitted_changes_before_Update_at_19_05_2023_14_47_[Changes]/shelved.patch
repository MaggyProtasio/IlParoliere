Index: src/ResultPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class ResultPage {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ResultPage.java b/src/ResultPage.java
--- a/src/ResultPage.java	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ b/src/ResultPage.java	(date 1684497889595)
@@ -1,2 +1,10 @@
+import javax.swing.*;
+
 public class ResultPage {
+    private JButton retryButton;
+    private JButton exitButton;
+
+    private void createUIComponents() {
+        // TODO: place custom component creation code here
+    }
 }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22__Changes_.xml	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]" date="1683811629389" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/05/2023 15:22 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_1.xml	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1" date="1683815311155" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/05/2023 16:28 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,438 +0,0 @@
-Index: src/Main.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.awt.*;\r\nimport java.io.*;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        //Oggetti e variabili\r\n        Dizionario diz = new Dizionario();\r\n        Scanner in = new Scanner(System.in);\r\n        String nickname;\r\n        String parolaInserita = \"\";\r\n        Random rand = new Random();\r\n\r\n        //creazione utente\r\n        System.out.println(\"Benvenuto nel paroliere!\");\r\n        System.out.println(\"Inserisci il nickname\");\r\n        nickname = in.nextLine();\r\n        Utente giocatore = new Utente(nickname);\r\n        Partita partita = new Partita(giocatore);\r\n\r\n        //provaAAAAAAAAAA\r\n        partita.matriceRandomInizio();\r\n        partita.stampaTabellone();\r\n        String[] dizionario = diz.leggiParole();\r\n        partita.inserisciParoleMatrice(dizionario);\r\n        partita.stampaTabellone();\r\n\r\n        //creazione partita\r\n        System.out.println(\"Inzia giocare! Vuoi testare la matrice [1] o parole nel dizionario [2]?\");\r\n        int scelta = in.nextInt();\r\n        in.nextLine();\r\n        if(scelta == 1){\r\n            //parte della matrice\r\n            //prova 1\r\n            partita.creaMatrice();\r\n            partita.stampaMatrice();\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n\r\n            //controllo se parola esiste nella matrice (e anche se è una parola)\r\n            boolean trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n\r\n            //prova 2\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n            //controllo se parola esiste nella matrice\r\n            trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n\r\n            //prova 3\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n            //controllo se parola esiste nella matrice\r\n            trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n        }else {\r\n\r\n            int i = 0;\r\n            do {\r\n                System.out.println(\"Parola \" + (i + 1) + \" \\nInserisci una parola\");\r\n                parolaInserita = in.nextLine();\r\n                //trova parola\r\n                if (diz.trovaParola(parolaInserita)) {\r\n                    if (partita.doppione(parolaInserita) == false) {\r\n                        System.out.println(\"Parola trovata nel dizionario!\");\r\n                        partita.aggiungiPunti(parolaInserita);\r\n                        System.out.println(\"Punti della parola: \" + partita.puntiParola(parolaInserita));\r\n                        //contatore\r\n                        partita.contaParola();\r\n                    } else {\r\n                        System.out.println(\"Hai già inserito questa parola >:(\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Questa parola non esiste nel dizionario >:(\");\r\n                }\r\n                i++;\r\n            } while (i < 5);\r\n            System.out.println(\"Punti della parita: \" + partita.getPuntiTotali());\r\n            System.out.println(\"Parole trovate: \" + partita.getParolaNum());\r\n            //stampa la prima parola inserita migliore\r\n            partita.controllaParolaMigliore();\r\n            System.out.println(\"Parola migliore: \" + partita.getParolaMigliore());\r\n        }\r\n\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Main.java b/src/Main.java
---- a/src/Main.java	
-+++ b/src/Main.java	
-@@ -19,13 +19,6 @@
-         Utente giocatore = new Utente(nickname);
-         Partita partita = new Partita(giocatore);
- 
--        //provaAAAAAAAAAA
--        partita.matriceRandomInizio();
--        partita.stampaTabellone();
--        String[] dizionario = diz.leggiParole();
--        partita.inserisciParoleMatrice(dizionario);
--        partita.stampaTabellone();
--
-         //creazione partita
-         System.out.println("Inzia giocare! Vuoi testare la matrice [1] o parole nel dizionario [2]?");
-         int scelta = in.nextInt();
-Index: src/Partita.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Iterator;\r\nimport java.util.Random;\r\nimport java.util.Vector;\r\n\r\npublic class Partita {\r\n    public int puntiTotali;\r\n    public Utente utente;\r\n    public String parolaMigliore;\r\n    public int parolaNum;\r\n\r\n    static char[][] tabellone = new char[6][6];\r\n    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/\r\n\r\n    Vector<String> paroleArray= new Vector<>();\r\n    Vector<String> paroleArray2= new Vector<>();\r\n\r\n    //costruttore\r\n    public Partita(Utente u){\r\n        this.utente = utente;\r\n        this.puntiTotali = 0;\r\n        this.parolaMigliore = null;\r\n    }\r\n\r\n    // getter e setter\r\n    public int getPuntiTotali() {\r\n        return puntiTotali;\r\n    }\r\n    public void setPuntiTotali(int puntiTotali) {\r\n        this.puntiTotali = puntiTotali;\r\n    }\r\n    public Utente getUtente() {\r\n        return utente;\r\n    }\r\n    public void setUtente(Utente utente) {\r\n        this.utente = utente;\r\n    }\r\n    public String getParolaMigliore() {\r\n        return parolaMigliore;\r\n    }\r\n    public void setParolaMigliore(String parolaMigliore) {\r\n        this.parolaMigliore = parolaMigliore;\r\n    }\r\n    public int getParolaNum() {\r\n        return parolaNum;\r\n    }\r\n    public void setParolaNum(int parolaNum) {\r\n        this.parolaNum = parolaNum;\r\n    }\r\n\r\n    //metodi\r\n    public void aggiungiPunti(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        puntiTotali = puntiTotali + punti;\r\n    }\r\n    public boolean controllaParolaMigliore() {\r\n        String best = \"\";\r\n        boolean unique = true;\r\n        Iterator<String> i = paroleArray.iterator();\r\n        while (i.hasNext()) {\r\n            String parola = i.next();\r\n            if (parola.length() > best.length()) {\r\n                best = parola;\r\n                unique = true;\r\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\r\n                unique = false;\r\n            }\r\n        }\r\n        setParolaMigliore(best);\r\n        return unique;\r\n    }\r\n\r\n    public int puntiParola(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        paroleArray.add(parola);\r\n        return punti;\r\n    }\r\n\r\n    public void contaParola(){\r\n        parolaNum++;\r\n    }\r\n\r\n    public boolean doppione(String parolaInserita){\r\n        boolean d = false; //doppione\r\n        int size = paroleArray.size(); //grandezza array\r\n        for(int x=0; x<size; x++){ //ciclo vettore grande\r\n            if(parolaInserita.equals(paroleArray.get(x))){\r\n                d = true;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n\r\n    /*public void inizializzaTabellone(){\r\n        for (int i = 0; i < 6; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                int index = (int) (Math.random() * lettere.length);\r\n                tabellone[i][j] = lettere[index];\r\n            }\r\n        }\r\n    }*/\r\n\r\n    public void stampaTabellone(){\r\n        for (int i = 0; i < 6; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                System.out.print(tabellone[i][j] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    //metodo per creare un vettore inizializato con lettere casuali\r\n    public void matriceRandomInizio(){\r\n        Random rand = new Random();\r\n        // riempimento casuale della matrice con lettere dell'alfabeto\r\n        for (int i = 0; i < tabellone.length; i++) {\r\n            for (int j = 0; j < tabellone[i].length; j++) {\r\n                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo\r\n                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione\r\n    public static boolean canInsertWord(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            // controlla se la posizione è all'interno della matrice\r\n            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {\r\n                return false;\r\n            }\r\n\r\n            // controlla se la posizione è già occupata da un'altra lettera\r\n            if (tabellone[y][x] != '\\u0000' && tabellone[y][x] != word.charAt(i)) {\r\n                System.out.println(\"La posizione (\" + y + \", \" + x + \") è già occupata da \" + tabellone[y][x] + \" e non da \" + word.charAt(i));\r\n                return false;\r\n            }\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // inserisce una parola nella matrice in una determinata posizione e direzione\r\n    public static void inserisciParola(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            tabellone[y][x] = word.charAt(i);\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file\r\n    public void inserisciParoleMatrice(String words[]){\r\n        Random rand = new Random();\r\n        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola\r\n        for (String word : words) {\r\n            boolean inserted = false;\r\n            int tentativi = 0;\r\n            while (!inserted && tentativi < maxTentativi) {\r\n                int row = rand.nextInt(tabellone.length);\r\n                int col = rand.nextInt(tabellone[row].length);\r\n                int dir = rand.nextInt(8);\r\n                if (canInsertWord(word, row, col, dir)) {\r\n                    inserisciParola(word, row, col, dir);\r\n                    inserted = true;\r\n                }\r\n                tentativi++;\r\n            }\r\n            if (!inserted) {\r\n                System.out.println(\"Non è stato possibile inserire la parola \" + word);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*public static void inizializzaMatrice(String[] parole) {\r\n        Random random = new Random();\r\n        int i, j, k;\r\n        for (String parola : parole) {\r\n            if (parola.length() >= 3 && parola.length() <= 6) {\r\n                boolean piazzata = false;\r\n                while (!piazzata) {\r\n                    i = random.nextInt(6);\r\n                    j = random.nextInt(6);\r\n                    k = random.nextInt(8);\r\n                    if (tabellone[i][j] == '\\0') {\r\n                        tabellone[i][j] = parola.charAt(0);\r\n                        int x = i + dx[k];\r\n                        int y = j + dy[k];\r\n                        boolean ok = true;\r\n                        for (int l = 1; l < parola.length(); l++) {\r\n                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {\r\n                                if (tabellone[x][y] == '\\0') {\r\n                                    tabellone[x][y] = parola.charAt(l);\r\n                                    x += dx[k];\r\n                                    y += dy[k];\r\n                                } else {\r\n                                    ok = false;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                ok = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (ok) {\r\n                            Dizionario d = new Dizionario();\r\n                            d.setParola(parola);\r\n                            paroleArray.add(d);\r\n                            piazzata = true;\r\n                        } else {\r\n                            for (int l = 0; l < parola.length(); l++) {\r\n                                if (tabellone[i][j] == parola.charAt(l)) {\r\n                                    tabellone[i][j] = '\\0';\r\n                                }\r\n                                i -= dx[k];\r\n                                j -= dy[k];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Partita.java b/src/Partita.java
---- a/src/Partita.java	
-+++ b/src/Partita.java	
-@@ -1,24 +1,16 @@
--import java.io.BufferedReader;
--import java.io.FileNotFoundException;
--import java.io.FileReader;
--import java.io.IOException;
- import java.util.Arrays;
- import java.util.Iterator;
--import java.util.Random;
- import java.util.Vector;
-+import java.util.Random;
- 
- public class Partita {
-     public int puntiTotali;
-     public Utente utente;
-     public String parolaMigliore;
-     public int parolaNum;
--
--    static char[][] tabellone = new char[6][6];
--    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
--            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/
-+    public char[][] matrice;
- 
-     Vector<String> paroleArray= new Vector<>();
--    Vector<String> paroleArray2= new Vector<>();
- 
-     //costruttore
-     public Partita(Utente u){
-@@ -53,6 +45,14 @@
-         this.parolaNum = parolaNum;
-     }
- 
-+    public char[][] getMatrice() {
-+        return matrice;
-+    }
-+
-+    public void setMatrice(char[][] matrice) {
-+        this.matrice = matrice;
-+    }
-+
-     //metodi
-     public void aggiungiPunti(String parola){
-         int lunghezzaParola = parola.length();
-@@ -100,184 +100,185 @@
-         return d;
-     }
- 
--    /*public void inizializzaTabellone(){
--        for (int i = 0; i < 6; i++) {
--            for (int j = 0; j < 6; j++) {
--                int index = (int) (Math.random() * lettere.length);
--                tabellone[i][j] = lettere[index];
--            }
--        }
--    }*/
-+    public void creaMatrice(String[] words){
-+        //String[] words = {"CASA", "AMORE", "TEMPO", "SOLE", "VITA", "BELLO", "GIORNO", "MARE", "AMICO", "BUONO"};
-+        String[] wordsInject = new String[10];      //iniettiamo 10 parole nel paroliere
- 
--    public void stampaTabellone(){
--        for (int i = 0; i < 6; i++) {
--            for (int j = 0; j < 6; j++) {
--                System.out.print(tabellone[i][j] + " ");
--            }
--            System.out.println();
--        }
--    }
--
--    //metodo per creare un vettore inizializato con lettere casuali
--    public void matriceRandomInizio(){
--        Random rand = new Random();
--        // riempimento casuale della matrice con lettere dell'alfabeto
--        for (int i = 0; i < tabellone.length; i++) {
--            for (int j = 0; j < tabellone[i].length; j++) {
--                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo
--                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));
--            }
--        }
--    }
--
--    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione
--    public static boolean canInsertWord(String word, int row, int col, int dir) {
--        int dx = 0;
--        int dy = 0;
--        if (dir == 0) {
--            dy = 1;
--        } else if (dir == 1) {
--            dx = 1;
--            dy = 1;
--        } else if (dir == 2) {
--            dx = 1;
--        } else if (dir == 3) {
--            dx = 1;
--            dy = -1;
--        } else if (dir == 4) {
--            dy = -1;
--        } else if (dir == 5) {
--            dx = -1;
--            dy = -1;
--        } else if (dir == 6) {
--            dx = -1;
--        } else if (dir == 7) {
--            dx = -1;
--            dy = 1;
--        }
--        int x = col;
--        int y = row;
--        for (int i = 0; i < word.length(); i++) {
--            // controlla se la posizione è all'interno della matrice
--            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {
--                return false;
--            }
--
--            // controlla se la posizione è già occupata da un'altra lettera
--            if (tabellone[y][x] != '\u0000' && tabellone[y][x] != word.charAt(i)) {
--                System.out.println("La posizione (" + y + ", " + x + ") è già occupata da " + tabellone[y][x] + " e non da " + word.charAt(i));
--                return false;
--            }
--            x += dx;
--            y += dy;
--        }
--        return true;
--    }
--    
--    // inserisce una parola nella matrice in una determinata posizione e direzione
--    public static void inserisciParola(String word, int row, int col, int dir) {
--        int dx = 0;
--        int dy = 0;
--        if (dir == 0) {
--            dy = 1;
--        } else if (dir == 1) {
--            dx = 1;
--            dy = 1;
--        } else if (dir == 2) {
--            dx = 1;
--        } else if (dir == 3) {
--            dx = 1;
--            dy = -1;
--        } else if (dir == 4) {
--            dy = -1;
--        } else if (dir == 5) {
--            dx = -1;
--            dy = -1;
--        } else if (dir == 6) {
--            dx = -1;
--        } else if (dir == 7) {
--            dx = -1;
--            dy = 1;
--        }
--        int x = col;
--        int y = row;
--        for (int i = 0; i < word.length(); i++) {
--            tabellone[y][x] = word.charAt(i);
--            x += dx;
--            y += dy;
--        }
--    }
--
--    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file
--    public void inserisciParoleMatrice(String words[]){
--        Random rand = new Random();
--        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola
--        for (String word : words) {
--            boolean inserted = false;
--            int tentativi = 0;
--            while (!inserted && tentativi < maxTentativi) {
--                int row = rand.nextInt(tabellone.length);
--                int col = rand.nextInt(tabellone[row].length);
--                int dir = rand.nextInt(8);
--                if (canInsertWord(word, row, col, dir)) {
--                    inserisciParola(word, row, col, dir);
--                    inserted = true;
--                }
--                tentativi++;
--            }
--            if (!inserted) {
--                System.out.println("Non è stato possibile inserire la parola " + word);
--            }
--        }
--    }
--
--    /*public static void inizializzaMatrice(String[] parole) {
-+        char[][] matrix = new char[10][10];
-         Random random = new Random();
--        int i, j, k;
--        for (String parola : parole) {
--            if (parola.length() >= 3 && parola.length() <= 6) {
--                boolean piazzata = false;
--                while (!piazzata) {
--                    i = random.nextInt(6);
--                    j = random.nextInt(6);
--                    k = random.nextInt(8);
--                    if (tabellone[i][j] == '\0') {
--                        tabellone[i][j] = parola.charAt(0);
--                        int x = i + dx[k];
--                        int y = j + dy[k];
--                        boolean ok = true;
--                        for (int l = 1; l < parola.length(); l++) {
--                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {
--                                if (tabellone[x][y] == '\0') {
--                                    tabellone[x][y] = parola.charAt(l);
--                                    x += dx[k];
--                                    y += dy[k];
--                                } else {
--                                    ok = false;
--                                    break;
--                                }
--                            } else {
--                                ok = false;
--                                break;
--                            }
--                        }
--                        if (ok) {
--                            Dizionario d = new Dizionario();
--                            d.setParola(parola);
--                            paroleArray.add(d);
--                            piazzata = true;
--                        } else {
--                            for (int l = 0; l < parola.length(); l++) {
--                                if (tabellone[i][j] == parola.charAt(l)) {
--                                    tabellone[i][j] = '\0';
--                                }
--                                i -= dx[k];
--                                j -= dy[k];
--                            }
--                        }
-+
-+        int contParole = 0;
-+        boolean parolaGood = false;
-+
-+        for (int i = 0; i < 10; i++){
-+            do {
-+                //controlliamo che parole random dal dizionario ha lunghezza minore di 10
-+                if(words[random.nextInt(661563)].length() <= 10){
-+                    contParole++;
-+                    parolaGood = true;
-+                }else{
-+                    random = new Random();
-+                }
-+            }while(!parolaGood);
-+            wordsInject[i] = words[random.nextInt(661563)];
-+
-+        }
-+
-+        // Insert Italian words horizontally
-+        for (int i = 0; i < wordsInject.length; i++) {
-+            String word = wordsInject[i];
-+            int wordLength = word.length();
-+            int row = random.nextInt(10);
-+            int col = random.nextInt(10 - wordLength + 1);
-+
-+            for (int j = 0; j < wordLength; j++) {
-+                matrix[row][col + j] = word.charAt(j);
-+            }
-+        }
-+
-+        // Insert Italian words vertically
-+        for (int i = 0; i < wordsInject.length; i++) {
-+            String word = wordsInject[i];
-+            int wordLength = word.length();
-+            int row = random.nextInt(10 - wordLength + 1);
-+            int col = random.nextInt(10);
-+
-+            for (int j = 0; j < wordLength; j++) {
-+                matrix[row + j][col] = word.charAt(j);
-+            }
-+        }
-+
-+        // Insert Italian words diagonally
-+        for (int i = 0; i < wordsInject.length; i++) {
-+            String word = wordsInject[i];
-+            int wordLength = word.length();
-+            int row = random.nextInt(10 - wordLength + 1);
-+            int col = random.nextInt(10 - wordLength + 1);
-+
-+            for (int j = 0; j < wordLength; j++) {
-+                matrix[row + j][col + j] = word.charAt(j);
-+            }
-+        }
-+
-+
-+        // Fill remaining empty slots with random letters
-+        for (int i = 0; i < 10; i++) {
-+            for (int j = 0; j < 10; j++) {
-+                if (matrix[i][j] == '\u0000') {
-+                    matrix[i][j] = (char) (random.nextInt(26) + 'A');
-+                }
-+            }
-+        }
-+
-+        this.matrice = matrix;
-+
-+    }
-+
-+    public void stampaMatrice(){
-+        for (int i = 0; i < this.matrice.length; i++) {
-+            for (int j = 0; j < this.matrice[i].length; j++) {
-+                System.out.print("┌───┐\t"); // Top border
-+            }
-+            System.out.println();
-+
-+            for (int j = 0; j < this.matrice[i].length; j++) {
-+                System.out.printf("│ %c │\t", this.matrice[i][j]); // Cell content
-+            }
-+            System.out.println();
-+
-+            for (int j = 0; j < this.matrice[i].length; j++) {
-+                System.out.print("└───┘\t"); // Bottom border
-+            }
-+            System.out.println();
-+        }
-+    }
-+
-+    public boolean trovaParolaMatrice(String word) {
-+        char[][] matrix = this.matrice;
-+        int rows = matrix.length;
-+        int cols = matrix[0].length;
-+        int wordLength = word.length();
-+
-+        // Check horizontally
-+        for (int i = 0; i < rows; i++) {
-+            for (int j = 0; j <= cols - wordLength; j++) {
-+                boolean found = true;
-+                for (int k = 0; k < wordLength; k++) {
-+                    if (matrix[i][j + k] != word.charAt(k)) {
-+                        found = false;
-+                        break;
-+                    }
-+                }
-+                if (found) {
-+                    return true;
-+                }
-+            }
-+        }
-+
-+        // Check vertically
-+        for (int i = 0; i <= rows - wordLength; i++) {
-+            for (int j = 0; j < cols; j++) {
-+                boolean found = true;
-+                for (int k = 0; k < wordLength; k++) {
-+                    if (matrix[i + k][j] != word.charAt(k)) {
-+                        found = false;
-+                        break;
-+                    }
-+                }
-+                if (found) {
-+                    return true;
-+                }
-+            }
-+        }
-+
-+        // Check diagonally (top-left to bottom-right)
-+        for (int i = 0; i <= rows - wordLength; i++) {
-+            for (int j = 0; j <= cols - wordLength; j++) {
-+                boolean found = true;
-+                for (int k = 0; k < wordLength; k++) {
-+                    if (matrix[i + k][j + k] != word.charAt(k)) {
-+                        found = false;
-+                        break;
-                     }
-                 }
--            }
--        }
--    }*/
-+                if (found) {
-+                    return true;
-+                }
-+            }
-+        }
-+
-+        // Check diagonally (bottom-left to top-right)
-+        for (int i = wordLength - 1; i < rows; i++) {
-+            for (int j = 0; j <= cols - wordLength; j++) {
-+                boolean found = true;
-+                for (int k = 0; k < wordLength; k++) {
-+                    if (matrix[i - k][j + k] != word.charAt(k)) {
-+                        found = false;
-+                        break;
-+                    }
-+                }
-+                if (found) {
-+                    return true;
-+                }
-+            }
-+        }
-+
-+        return false;
-+    }
-+
-+
-+    private boolean checkWord(char[][] matrix, String word, int row, int col, int rowStep, int colStep) {
-+        int wordLength = word.length();
-+        for (int i = 0; i < wordLength; i++) {
-+            if (row < 0 || row >= matrix.length || col < 0 || col >= matrix[0].length ||
-+                    matrix[row][col] != word.charAt(i)) {
-+                return false;
-+            }
-+            row += rowStep;
-+            col += colStep;
-+        }
-+        return true;
-+    }
-+
-+
- }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,93 +0,0 @@
-Index: src/Partita.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.util.Arrays;\r\nimport java.util.Iterator;\r\nimport java.util.Vector;\r\nimport java.util.Random;\r\n\r\npublic class Partita {\r\n    public int puntiTotali;\r\n    public Utente utente;\r\n    public String parolaMigliore;\r\n    public int parolaNum;\r\n    public char[][] matrice;\r\n\r\n    Vector<String> paroleArray= new Vector<>();\r\n\r\n    //costruttore\r\n    public Partita(Utente u){\r\n        this.utente = utente;\r\n        this.puntiTotali = 0;\r\n        this.parolaMigliore = null;\r\n    }\r\n\r\n    // getter e setter\r\n    public int getPuntiTotali() {\r\n        return puntiTotali;\r\n    }\r\n    public void setPuntiTotali(int puntiTotali) {\r\n        this.puntiTotali = puntiTotali;\r\n    }\r\n    public Utente getUtente() {\r\n        return utente;\r\n    }\r\n    public void setUtente(Utente utente) {\r\n        this.utente = utente;\r\n    }\r\n    public String getParolaMigliore() {\r\n        return parolaMigliore;\r\n    }\r\n    public void setParolaMigliore(String parolaMigliore) {\r\n        this.parolaMigliore = parolaMigliore;\r\n    }\r\n    public int getParolaNum() {\r\n        return parolaNum;\r\n    }\r\n    public void setParolaNum(int parolaNum) {\r\n        this.parolaNum = parolaNum;\r\n    }\r\n\r\n    public char[][] getMatrice() {\r\n        return matrice;\r\n    }\r\n\r\n    public void setMatrice(char[][] matrice) {\r\n        this.matrice = matrice;\r\n    }\r\n\r\n    //metodi\r\n    public void aggiungiPunti(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        puntiTotali = puntiTotali + punti;\r\n    }\r\n    public boolean controllaParolaMigliore() {\r\n        String best = \"\";\r\n        boolean unique = true;\r\n        Iterator<String> i = paroleArray.iterator();\r\n        while (i.hasNext()) {\r\n            String parola = i.next();\r\n            if (parola.length() > best.length()) {\r\n                best = parola;\r\n                unique = true;\r\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\r\n                unique = false;\r\n            }\r\n        }\r\n        setParolaMigliore(best);\r\n        return unique;\r\n    }\r\n\r\n    public int puntiParola(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        paroleArray.add(parola);\r\n        return punti;\r\n    }\r\n\r\n    public void contaParola(){\r\n        parolaNum++;\r\n    }\r\n\r\n    public boolean doppione(String parolaInserita){\r\n        boolean d = false; //doppione\r\n        int size = paroleArray.size(); //grandezza array\r\n        for(int x=0; x<size; x++){ //ciclo vettore grande\r\n            if(parolaInserita.equals(paroleArray.get(x))){\r\n                d = true;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n\r\n    public void creaMatrice(){\r\n        String[] words = {\r\n                \"CASA\", \"AMORE\", \"TEMPO\", \"SOLE\", \"VITA\", \"BELLO\", \"GIORNO\", \"MARE\", \"AMICO\", \"BUONO\"\r\n        };\r\n\r\n        char[][] matrix = new char[7][7];\r\n        Random random = new Random();\r\n\r\n        // Insert Italian words horizontally\r\n        for (int i = 0; i < words.length; i++) {\r\n            String word = words[i];\r\n            int wordLength = word.length();\r\n            int row = random.nextInt(7);\r\n            int col = random.nextInt(7 - wordLength + 1);\r\n\r\n            for (int j = 0; j < wordLength; j++) {\r\n                matrix[row][col + j] = word.charAt(j);\r\n            }\r\n        }\r\n\r\n        // Insert Italian words vertically\r\n        for (int i = 0; i < words.length; i++) {\r\n            String word = words[i];\r\n            int wordLength = word.length();\r\n            int row = random.nextInt(7 - wordLength + 1);\r\n            int col = random.nextInt(7);\r\n\r\n            for (int j = 0; j < wordLength; j++) {\r\n                matrix[row + j][col] = word.charAt(j);\r\n            }\r\n        }\r\n\r\n        // Fill remaining empty slots with random letters\r\n        for (int i = 0; i < 7; i++) {\r\n            for (int j = 0; j < 7; j++) {\r\n                if (matrix[i][j] == '\\u0000') {\r\n                    matrix[i][j] = (char) (random.nextInt(26) + 'A');\r\n                }\r\n            }\r\n        }\r\n\r\n        this.matrice = matrix;\r\n\r\n    }\r\n\r\n    public void stampaMatrice(){\r\n        for (int i = 0; i < this.matrice.length; i++) {\r\n            for (int j = 0; j < this.matrice[i].length; j++) {\r\n                System.out.print(\"┌───┐\\t\"); // Top border\r\n            }\r\n            System.out.println();\r\n\r\n            for (int j = 0; j < this.matrice[i].length; j++) {\r\n                System.out.printf(\"│ %c │\\t\", this.matrice[i][j]); // Cell content\r\n            }\r\n            System.out.println();\r\n\r\n            for (int j = 0; j < this.matrice[i].length; j++) {\r\n                System.out.print(\"└───┘\\t\"); // Bottom border\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    public boolean trovaParolaMatrice(String word) {\r\n        char[][] matrix = this.matrice;\r\n        int rows = matrix.length;\r\n        int cols = matrix[0].length;\r\n        int wordLength = word.length();\r\n\r\n        // Check horizontally\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j <= cols - wordLength; j++) {\r\n                boolean found = true;\r\n                for (int k = 0; k < wordLength; k++) {\r\n                    if (matrix[i][j + k] != word.charAt(k)) {\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check vertically\r\n        for (int i = 0; i <= rows - wordLength; i++) {\r\n            for (int j = 0; j < cols; j++) {\r\n                boolean found = true;\r\n                for (int k = 0; k < wordLength; k++) {\r\n                    if (matrix[i + k][j] != word.charAt(k)) {\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check diagonally (top-left to bottom-right)\r\n        for (int i = 0; i <= rows - wordLength; i++) {\r\n            for (int j = 0; j <= cols - wordLength; j++) {\r\n                boolean found = true;\r\n                for (int k = 0; k < wordLength; k++) {\r\n                    if (matrix[i + k][j + k] != word.charAt(k)) {\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check diagonally (bottom-left to top-right)\r\n        for (int i = wordLength - 1; i < rows; i++) {\r\n            for (int j = 0; j <= cols - wordLength; j++) {\r\n                boolean found = true;\r\n                for (int k = 0; k < wordLength; k++) {\r\n                    if (matrix[i - k][j + k] != word.charAt(k)) {\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    private boolean checkWord(char[][] matrix, String word, int row, int col, int rowStep, int colStep) {\r\n        int wordLength = word.length();\r\n        for (int i = 0; i < wordLength; i++) {\r\n            if (row < 0 || row >= matrix.length || col < 0 || col >= matrix[0].length ||\r\n                    matrix[row][col] != word.charAt(i)) {\r\n                return false;\r\n            }\r\n            row += rowStep;\r\n            col += colStep;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Partita.java b/src/Partita.java
---- a/src/Partita.java	(revision 3529e96688233188de35f6f2d6b0ff22731fe8fa)
-+++ b/src/Partita.java	(date 1683810695662)
-@@ -132,6 +132,19 @@
-             }
-         }
- 
-+        // Insert Italian words diagonally
-+        for (int i = 0; i < words.length; i++) {
-+            String word = words[i];
-+            int wordLength = word.length();
-+            int row = random.nextInt(7 - wordLength + 1);
-+            int col = random.nextInt(7 - wordLength + 1);
-+
-+            for (int j = 0; j < wordLength; j++) {
-+                matrix[row + j][col + j] = word.charAt(j);
-+            }
-+        }
-+
-+
-         // Fill remaining empty slots with random letters
-         for (int i = 0; i < 7; i++) {
-             for (int j = 0; j < 7; j++) {
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8462984d-23c0-4314-847e-acde3a7b6bf0\" name=\"Changes\" comment=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Partita.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Partita.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MgM7lntEbmlzdqeqLILpROIR0b\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH&quot;: &quot;261&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Maggy/IdeaProjects/IlParoliere/src/img&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\\img\" />\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\" />\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\\MenuPage\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8462984d-23c0-4314-847e-acde3a7b6bf0\" name=\"Changes\" comment=\"\" />\r\n      <created>1678184607277</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678184607277</updated>\r\n      <workItem from=\"1678184608473\" duration=\"1000\" />\r\n      <workItem from=\"1678185005684\" duration=\"1221000\" />\r\n      <workItem from=\"1678188292233\" duration=\"1901000\" />\r\n      <workItem from=\"1679567791335\" duration=\"2677000\" />\r\n      <workItem from=\"1679996146394\" duration=\"3802000\" />\r\n      <workItem from=\"1680601684537\" duration=\"1782000\" />\r\n      <workItem from=\"1681810082945\" duration=\"575000\" />\r\n      <workItem from=\"1681810667700\" duration=\"1221000\" />\r\n      <workItem from=\"1683020363813\" duration=\"2223000\" />\r\n      <workItem from=\"1683023042829\" duration=\"561000\" />\r\n      <workItem from=\"1683297457506\" duration=\"225000\" />\r\n      <workItem from=\"1683716109530\" duration=\"274000\" />\r\n      <workItem from=\"1683748303812\" duration=\"4256000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\":add user and dizionari\">\r\n      <created>1678188079722</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678188079722</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\":add user and dizionari\">\r\n      <created>1678188096489</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678188096489</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\":rename file to dictionary.txt\">\r\n      <created>1678189356605</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678189356605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\": ADD ciclo for e iniziato il gioco\">\r\n      <created>1679392892862</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679392892862</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\":add Dizionario obj, sistemato partita, manca parolaMigliore\">\r\n      <created>1679397101138</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679397101138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\":sistemazione parolamigliore\">\r\n      <created>1679570450866</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679570450866</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\":sistemazione funzione doppione\">\r\n      <created>1683297492858</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683297492858</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\":sistemazione funzione doppione\">\r\n      <created>1683297535598</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683297535598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\">\r\n      <created>1683308242016</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683308242016</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\">\r\n      <created>1683308426433</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683308426433</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"11\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\":add user and dizionari\" />\r\n    <MESSAGE value=\":rename file to dictionary.txt\" />\r\n    <MESSAGE value=\": ADD ciclo for e iniziato il gioco\" />\r\n    <MESSAGE value=\":add Dizionario obj, sistemato partita, manca parolaMigliore\" />\r\n    <MESSAGE value=\":sistemazione parolamigliore\" />\r\n    <MESSAGE value=\":sistemazione funzione doppione\" />\r\n    <MESSAGE value=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/IlParoliere$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1683752900482\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/IlParoliere$StartPage.ic\" NAME=\"StartPage Coverage Results\" MODIFIED=\"1683308106935\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision 3529e96688233188de35f6f2d6b0ff22731fe8fa)
-+++ b/.idea/workspace.xml	(date 1683811347232)
-@@ -4,9 +4,8 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="8462984d-23c0-4314-847e-acde3a7b6bf0" name="Changes" comment="ADD: Created Menu GUI page and Classico Game GUI. Connected them">
-+    <list default="true" id="8462984d-23c0-4314-847e-acde3a7b6bf0" name="Changes" comment="ADD: Created matrix and algorithm to search word from it">
-       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
--      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
-       <change beforePath="$PROJECT_DIR$/src/Partita.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Partita.java" afterDir="false" />
-     </list>
-     <option name="SHOW_DIALOG" value="false" />
-@@ -78,7 +77,9 @@
-       <workItem from="1683023042829" duration="561000" />
-       <workItem from="1683297457506" duration="225000" />
-       <workItem from="1683716109530" duration="274000" />
--      <workItem from="1683748303812" duration="4256000" />
-+      <workItem from="1683748303812" duration="4631000" />
-+      <workItem from="1683799180778" duration="905000" />
-+      <workItem from="1683810262411" duration="1074000" />
-     </task>
-     <task id="LOCAL-00001" summary=":add user and dizionari">
-       <created>1678188079722</created>
-@@ -150,7 +151,14 @@
-       <option name="project" value="LOCAL" />
-       <updated>1683308426433</updated>
-     </task>
--    <option name="localTasksCounter" value="11" />
-+    <task id="LOCAL-00011" summary="ADD: Created matrix and algorithm to search word from it">
-+      <created>1683752981393</created>
-+      <option name="number" value="00011" />
-+      <option name="presentableId" value="LOCAL-00011" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1683752981393</updated>
-+    </task>
-+    <option name="localTasksCounter" value="12" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -175,10 +183,11 @@
-     <MESSAGE value=":sistemazione parolamigliore" />
-     <MESSAGE value=":sistemazione funzione doppione" />
-     <MESSAGE value="ADD: Created Menu GUI page and Classico Game GUI. Connected them" />
--    <option name="LAST_COMMIT_MESSAGE" value="ADD: Created Menu GUI page and Classico Game GUI. Connected them" />
-+    <MESSAGE value="ADD: Created matrix and algorithm to search word from it" />
-+    <option name="LAST_COMMIT_MESSAGE" value="ADD: Created matrix and algorithm to search word from it" />
-   </component>
-   <component name="com.intellij.coverage.CoverageDataManagerImpl">
--    <SUITE FILE_PATH="coverage/IlParoliere$Main.ic" NAME="Main Coverage Results" MODIFIED="1683752900482" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
-+    <SUITE FILE_PATH="coverage/IlParoliere$Main.ic" NAME="Main Coverage Results" MODIFIED="1683810989275" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
-     <SUITE FILE_PATH="coverage/IlParoliere$StartPage.ic" NAME="StartPage Coverage Results" MODIFIED="1683308106935" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
-   </component>
- </project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_1.xml	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1" date="1683811180767" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/05/23, 15:17 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ /dev/null	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
@@ -1,328 +0,0 @@
-Index: src/Main.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.awt.*;\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n\n        //Oggetti e variabili\n        Dizionario diz = new Dizionario();\n        Scanner in = new Scanner(System.in);\n        String nickname;\n        String parolaInserita = \"\";\n\n        //creazione utente\n        System.out.println(\"Benvenuto nel paroliere!\");\n        System.out.println(\"Inserisci il nickname\");\n        nickname = in.nextLine();\n\n        Utente giocatore = new Utente(nickname);\n        Partita partita = new Partita(giocatore);\n\n        //creazione partita\n        System.out.println(\"Inzia giocare!\");\n        int i = 0;\n        do {\n            System.out.println(\"Parola \" + (i+1) + \" \\nInserisci una parola\");\n            parolaInserita = in.nextLine();\n            //trova parola\n            if(diz.trovaParola(parolaInserita)){\n                    if(partita.doppione(parolaInserita) == false){\n                        System.out.println(\"Parola trovata nel dizionario!\");\n                        partita.aggiungiPunti(parolaInserita);\n                        System.out.println(\"Punti della parola: \"+partita.puntiParola(parolaInserita));\n                        //contatore\n                        partita.contaParola();\n                    }else{\n                        System.out.println(\"Hai già inserito questa parola >:(\");\n                    }\n            }else{\n                System.out.println(\"Questa parola non esiste nel dizionario >:(\");\n            }\n            i++;\n        }while(i < 5);\n        System.out.println(\"Punti della parita: \"+partita.getPuntiTotali());\n        System.out.println(\"Parole trovate: \"+partita.getParolaNum());\n        //stampa la prima parola inserita migliore\n        partita.controllaParolaMigliore();\n        System.out.println(\"Parola migliore: \"+partita.getParolaMigliore());\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Main.java b/src/Main.java
---- a/src/Main.java	
-+++ b/src/Main.java	
-@@ -1,5 +1,6 @@
- import java.awt.*;
- import java.io.*;
-+import java.util.Random;
- import java.util.Scanner;
- 
- public class Main {
-@@ -11,6 +12,7 @@
-         Scanner in = new Scanner(System.in);
-         String nickname;
-         String parolaInserita = "";
-+        Random rand = new Random();
- 
-         //creazione utente
-         System.out.println("Benvenuto nel paroliere!");
-@@ -20,6 +22,13 @@
-         Utente giocatore = new Utente(nickname);
-         Partita partita = new Partita(giocatore);
- 
-+        //provaAAAAAAAAAA
-+        partita.matriceRandomInizio();
-+        partita.stampaTabellone();
-+        String[] dizionario = diz.leggiParole();
-+        partita.inserisciParoleMatrice(dizionario);
-+        partita.stampaTabellone();
-+
-         //creazione partita
-         System.out.println("Inzia giocare!");
-         int i = 0;
-Index: src/Dizionario.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.io.*;\nimport java.util.Scanner; // Import the Scanner class to read text files\n\npublic class Dizionario {\n    private String parola;\n\n    public Dizionario() {\n\n    }\n\n    public String getParola() {\n        return parola;\n    }\n\n    public void setParola(String parola) {\n        this.parola = parola;\n    }\n\n    public boolean trovaParola(String p){\n        boolean b = false;\n        try {\n            String filePath = \"src/dictionary.txt\"; // filename and Main.java are in the same folder\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            String line = reader.readLine();\n            while (line != null) {\n                if(p.equals(line)){\n                    System.out.println(line+\" - trovato :D\");\n                    b = true;\n                    break;\n                }\n                line = reader.readLine();\n            }\n            System.out.println(\"FINE\");\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return b;\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Dizionario.java b/src/Dizionario.java
---- a/src/Dizionario.java	
-+++ b/src/Dizionario.java	
-@@ -3,6 +3,7 @@
- 
- public class Dizionario {
-     private String parola;
-+    String[] words = new String[661563]; // parole in file NON MODIFICARE
- 
-     public Dizionario() {
- 
-@@ -37,4 +38,49 @@
-         }
-         return b;
-     }
--}
-+
-+    public boolean stampaParole(String p){
-+        boolean b = false;
-+        try {
-+            String filePath = "src/dictionary.txt"; // filename and Main.java are in the same folder
-+            BufferedReader reader = new BufferedReader(new FileReader(filePath));
-+            String line = reader.readLine();
-+            while (line != null) {
-+                if(p.equals(line)){
-+                    System.out.println(line+" - trovato :D");
-+                    b = true;
-+                    break;
-+                }
-+                line = reader.readLine();
-+            }
-+            System.out.println("FINE");
-+            reader.close();
-+        } catch (IOException e) {
-+            e.printStackTrace();
-+        }
-+        return b;
-+    }
-+
-+    public String[] leggiParole() {
-+            String filePath = "src/dictionary.txt"; // filename and Main.java are in the same folder
-+            File file = new File(filePath);
-+            try {
-+                Scanner scanner = new Scanner(file);
-+                int i = 0;
-+                while (scanner.hasNextLine()) {
-+                    String line = scanner.nextLine();
-+                    String[] lineWords = line.split(" "); // Split della riga
-+                    for (String word : lineWords) {
-+                        words[i] = word; // metti parola in array wors
-+                        i++;
-+                    }
-+                }
-+                scanner.close();
-+                // Now you can use the 'words' array to process the words as needed
-+               // System.out.println("parole totali: " + i);
-+            } catch (FileNotFoundException e) {
-+                e.printStackTrace();
-+            }
-+            return words;
-+        }
-+    }
-Index: src/Partita.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Vector;\n\npublic class Partita {\n    public int puntiTotali;\n    public Utente utente;\n    public String parolaMigliore;\n    public int parolaNum;\n\n    Vector<String> paroleArray= new Vector<>();\n\n    //costruttore\n    public Partita(Utente u){\n        this.utente = utente;\n        this.puntiTotali = 0;\n        this.parolaMigliore = null;\n    }\n\n    // getter e setter\n    public int getPuntiTotali() {\n        return puntiTotali;\n    }\n    public void setPuntiTotali(int puntiTotali) {\n        this.puntiTotali = puntiTotali;\n    }\n    public Utente getUtente() {\n        return utente;\n    }\n    public void setUtente(Utente utente) {\n        this.utente = utente;\n    }\n    public String getParolaMigliore() {\n        return parolaMigliore;\n    }\n    public void setParolaMigliore(String parolaMigliore) {\n        this.parolaMigliore = parolaMigliore;\n    }\n    public int getParolaNum() {\n        return parolaNum;\n    }\n    public void setParolaNum(int parolaNum) {\n        this.parolaNum = parolaNum;\n    }\n\n    //metodi\n    public void aggiungiPunti(String parola){\n        int lunghezzaParola = parola.length();\n        int k = 100;            //costante\n        int punti = lunghezzaParola * k;\n        puntiTotali = puntiTotali + punti;\n    }\n    public boolean controllaParolaMigliore() {\n        String best = \"\";\n        boolean unique = true;\n        Iterator<String> i = paroleArray.iterator();\n        while (i.hasNext()) {\n            String parola = i.next();\n            if (parola.length() > best.length()) {\n                best = parola;\n                unique = true;\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\n                unique = false;\n            }\n        }\n        setParolaMigliore(best);\n        return unique;\n    }\n\n    public int puntiParola(String parola){\n        int lunghezzaParola = parola.length();\n        int k = 100;            //costante\n        int punti = lunghezzaParola * k;\n        paroleArray.add(parola);\n        return punti;\n    }\n\n    public void contaParola(){\n        parolaNum++;\n    }\n\n    public boolean doppione(String parolaInserita){\n        boolean d = false; //doppione\n        int size = paroleArray.size(); //grandezza array\n        for(int x=0; x<size; x++){ //ciclo vettore grande\n            if(parolaInserita.equals(paroleArray.get(x))){\n                d = true;\n            }\n        }\n        return d;\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/Partita.java b/src/Partita.java
---- a/src/Partita.java	
-+++ b/src/Partita.java	
-@@ -1,5 +1,10 @@
-+import java.io.BufferedReader;
-+import java.io.FileNotFoundException;
-+import java.io.FileReader;
-+import java.io.IOException;
- import java.util.Arrays;
- import java.util.Iterator;
-+import java.util.Random;
- import java.util.Vector;
- 
- public class Partita {
-@@ -8,7 +13,12 @@
-     public String parolaMigliore;
-     public int parolaNum;
- 
-+    static char[][] tabellone = new char[6][6];
-+    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
-+            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/
-+
-     Vector<String> paroleArray= new Vector<>();
-+    Vector<String> paroleArray2= new Vector<>();
- 
-     //costruttore
-     public Partita(Utente u){
-@@ -89,4 +99,185 @@
-         }
-         return d;
-     }
-+
-+    /*public void inizializzaTabellone(){
-+        for (int i = 0; i < 6; i++) {
-+            for (int j = 0; j < 6; j++) {
-+                int index = (int) (Math.random() * lettere.length);
-+                tabellone[i][j] = lettere[index];
-+            }
-+        }
-+    }*/
-+
-+    public void stampaTabellone(){
-+        for (int i = 0; i < 6; i++) {
-+            for (int j = 0; j < 6; j++) {
-+                System.out.print(tabellone[i][j] + " ");
-+            }
-+            System.out.println();
-+        }
-+    }
-+
-+    //metodo per creare un vettore inizializato con lettere casuali
-+    public void matriceRandomInizio(){
-+        Random rand = new Random();
-+        // riempimento casuale della matrice con lettere dell'alfabeto
-+        for (int i = 0; i < tabellone.length; i++) {
-+            for (int j = 0; j < tabellone[i].length; j++) {
-+                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo
-+                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));
-+            }
-+        }
-+    }
-+
-+    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione
-+    public static boolean canInsertWord(String word, int row, int col, int dir) {
-+        int dx = 0;
-+        int dy = 0;
-+        if (dir == 0) {
-+            dy = 1;
-+        } else if (dir == 1) {
-+            dx = 1;
-+            dy = 1;
-+        } else if (dir == 2) {
-+            dx = 1;
-+        } else if (dir == 3) {
-+            dx = 1;
-+            dy = -1;
-+        } else if (dir == 4) {
-+            dy = -1;
-+        } else if (dir == 5) {
-+            dx = -1;
-+            dy = -1;
-+        } else if (dir == 6) {
-+            dx = -1;
-+        } else if (dir == 7) {
-+            dx = -1;
-+            dy = 1;
-+        }
-+        int x = col;
-+        int y = row;
-+        for (int i = 0; i < word.length(); i++) {
-+            // controlla se la posizione è all'interno della matrice
-+            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {
-+                return false;
-+            }
-+
-+            // controlla se la posizione è già occupata da un'altra lettera
-+            if (tabellone[y][x] != '\u0000' && tabellone[y][x] != word.charAt(i)) {
-+                System.out.println("La posizione (" + y + ", " + x + ") è già occupata da " + tabellone[y][x] + " e non da " + word.charAt(i));
-+                return false;
-+            }
-+            x += dx;
-+            y += dy;
-+        }
-+        return true;
-+    }
-+    
-+    // inserisce una parola nella matrice in una determinata posizione e direzione
-+    public static void inserisciParola(String word, int row, int col, int dir) {
-+        int dx = 0;
-+        int dy = 0;
-+        if (dir == 0) {
-+            dy = 1;
-+        } else if (dir == 1) {
-+            dx = 1;
-+            dy = 1;
-+        } else if (dir == 2) {
-+            dx = 1;
-+        } else if (dir == 3) {
-+            dx = 1;
-+            dy = -1;
-+        } else if (dir == 4) {
-+            dy = -1;
-+        } else if (dir == 5) {
-+            dx = -1;
-+            dy = -1;
-+        } else if (dir == 6) {
-+            dx = -1;
-+        } else if (dir == 7) {
-+            dx = -1;
-+            dy = 1;
-+        }
-+        int x = col;
-+        int y = row;
-+        for (int i = 0; i < word.length(); i++) {
-+            tabellone[y][x] = word.charAt(i);
-+            x += dx;
-+            y += dy;
-+        }
-+    }
-+
-+    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file
-+    public void inserisciParoleMatrice(String words[]){
-+        Random rand = new Random();
-+        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola
-+        for (String word : words) {
-+            boolean inserted = false;
-+            int tentativi = 0;
-+            while (!inserted && tentativi < maxTentativi) {
-+                int row = rand.nextInt(tabellone.length);
-+                int col = rand.nextInt(tabellone[row].length);
-+                int dir = rand.nextInt(8);
-+                if (canInsertWord(word, row, col, dir)) {
-+                    inserisciParola(word, row, col, dir);
-+                    inserted = true;
-+                }
-+                tentativi++;
-+            }
-+            if (!inserted) {
-+                System.out.println("Non è stato possibile inserire la parola " + word);
-+            }
-+        }
-+    }
-+
-+    /*public static void inizializzaMatrice(String[] parole) {
-+        Random random = new Random();
-+        int i, j, k;
-+        for (String parola : parole) {
-+            if (parola.length() >= 3 && parola.length() <= 6) {
-+                boolean piazzata = false;
-+                while (!piazzata) {
-+                    i = random.nextInt(6);
-+                    j = random.nextInt(6);
-+                    k = random.nextInt(8);
-+                    if (tabellone[i][j] == '\0') {
-+                        tabellone[i][j] = parola.charAt(0);
-+                        int x = i + dx[k];
-+                        int y = j + dy[k];
-+                        boolean ok = true;
-+                        for (int l = 1; l < parola.length(); l++) {
-+                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {
-+                                if (tabellone[x][y] == '\0') {
-+                                    tabellone[x][y] = parola.charAt(l);
-+                                    x += dx[k];
-+                                    y += dy[k];
-+                                } else {
-+                                    ok = false;
-+                                    break;
-+                                }
-+                            } else {
-+                                ok = false;
-+                                break;
-+                            }
-+                        }
-+                        if (ok) {
-+                            Dizionario d = new Dizionario();
-+                            d.setParola(parola);
-+                            paroleArray.add(d);
-+                            piazzata = true;
-+                        } else {
-+                            for (int l = 0; l < parola.length(); l++) {
-+                                if (tabellone[i][j] == parola.charAt(l)) {
-+                                    tabellone[i][j] = '\0';
-+                                }
-+                                i -= dx[k];
-+                                j -= dy[k];
-+                            }
-+                        }
-+                    }
-+                }
-+            }
-+        }
-+    }*/
- }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8462984d-23c0-4314-847e-acde3a7b6bf0\" name=\"Changes\" comment=\"MODIFY: sistemato file parole comuni e modificato size words\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/MainprovaTimer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MgM7lntEbmlzdqeqLILpROIR0b\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;UI_DESIGNER_EDITOR_MODE.UIDesignerToolWindowManager.WIDTH&quot;: &quot;261&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Maggy/IdeaProjects/IlParoliere/src/img&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\\img\" />\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\" />\r\n      <recent name=\"C:\\Users\\Maggy\\IdeaProjects\\IlParoliere\\src\\MenuPage\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"TimerGUI\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"TimerGUI\" />\r\n      <module name=\"IlParoliere\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.TimerGUI\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8462984d-23c0-4314-847e-acde3a7b6bf0\" name=\"Changes\" comment=\"\" />\r\n      <created>1678184607277</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678184607277</updated>\r\n      <workItem from=\"1678184608473\" duration=\"1000\" />\r\n      <workItem from=\"1678185005684\" duration=\"1221000\" />\r\n      <workItem from=\"1678188292233\" duration=\"1901000\" />\r\n      <workItem from=\"1679567791335\" duration=\"2677000\" />\r\n      <workItem from=\"1679996146394\" duration=\"3802000\" />\r\n      <workItem from=\"1680601684537\" duration=\"1782000\" />\r\n      <workItem from=\"1681810082945\" duration=\"575000\" />\r\n      <workItem from=\"1681810667700\" duration=\"1221000\" />\r\n      <workItem from=\"1683020363813\" duration=\"2223000\" />\r\n      <workItem from=\"1683023042829\" duration=\"561000\" />\r\n      <workItem from=\"1683297457506\" duration=\"225000\" />\r\n      <workItem from=\"1683716109530\" duration=\"274000\" />\r\n      <workItem from=\"1683748303812\" duration=\"4256000\" />\r\n      <workItem from=\"1684226082783\" duration=\"2179000\" />\r\n      <workItem from=\"1684303407544\" duration=\"3229000\" />\r\n      <workItem from=\"1684408899295\" duration=\"4821000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\":add user and dizionari\">\r\n      <created>1678188079722</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678188079722</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\":add user and dizionari\">\r\n      <created>1678188096489</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678188096489</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\":rename file to dictionary.txt\">\r\n      <created>1678189356605</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678189356605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\": ADD ciclo for e iniziato il gioco\">\r\n      <created>1679392892862</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679392892862</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\":add Dizionario obj, sistemato partita, manca parolaMigliore\">\r\n      <created>1679397101138</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679397101138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\":sistemazione parolamigliore\">\r\n      <created>1679570450866</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679570450866</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\":sistemazione funzione doppione\">\r\n      <created>1683297492858</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683297492858</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\":sistemazione funzione doppione\">\r\n      <created>1683297535598</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683297535598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\">\r\n      <created>1683308242016</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683308242016</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\">\r\n      <created>1683308426433</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683308426433</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"ADD: funzioni per tabellone e creazione array per dizionario\">\r\n      <created>1683811269024</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683811269024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"ADD: stampawords\">\r\n      <created>1683813484618</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683813484618</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"ADD: Connected ParoleComuni.txt to the matrix and improved game flow\">\r\n      <created>1684162955447</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684162955447</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"FIX: Parole count and spelling\">\r\n      <created>1684163530580</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684163530580</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"FIX: minimal fixes\">\r\n      <created>1684165946943</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684165946944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"FIX: minimal fixes\">\r\n      <created>1684165989033</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684165989033</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"MODIFY: sistemato file parole comuni e modificato size words\">\r\n      <created>1684235207833</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684235207833</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"18\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\":add user and dizionari\" />\r\n    <MESSAGE value=\":rename file to dictionary.txt\" />\r\n    <MESSAGE value=\": ADD ciclo for e iniziato il gioco\" />\r\n    <MESSAGE value=\":add Dizionario obj, sistemato partita, manca parolaMigliore\" />\r\n    <MESSAGE value=\":sistemazione parolamigliore\" />\r\n    <MESSAGE value=\":sistemazione funzione doppione\" />\r\n    <MESSAGE value=\"ADD: Created Menu GUI page and Classico Game GUI. Connected them\" />\r\n    <MESSAGE value=\"ADD: funzioni per tabellone e creazione array per dizionario\" />\r\n    <MESSAGE value=\"ADD: stampawords\" />\r\n    <MESSAGE value=\"ADD: Connected ParoleComuni.txt to the matrix and improved game flow\" />\r\n    <MESSAGE value=\"FIX: Parole count and spelling\" />\r\n    <MESSAGE value=\"FIX: minimal fixes\" />\r\n    <MESSAGE value=\"MODIFY: sistemato file parole comuni e modificato size words\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"MODIFY: sistemato file parole comuni e modificato size words\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/IlParoliere$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1683812690821\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/IlParoliere$StartPage.ic\" NAME=\"StartPage Coverage Results\" MODIFIED=\"1683308106935\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ b/.idea/workspace.xml	(date 1684497838863)
@@ -4,9 +4,30 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8462984d-23c0-4314-847e-acde3a7b6bf0" name="Changes" comment="MODIFY: sistemato file parole comuni e modificato size words">
-      <change afterPath="$PROJECT_DIR$/src/MainprovaTimer.java" afterDir="false" />
+    <list default="true" id="8462984d-23c0-4314-847e-acde3a7b6bf0" name="Changes" comment=":implemento ResultPage">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23__17_58__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23__17_58__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_03_2023_11_53__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_03_2023_11_53__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_03_2023_12_37__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_07_03_2023_12_37__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22_[Changes]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_15_22__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_2023_16_28__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23,_15_17_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_05_23__15_17__Changes_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2023_16_08__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2023_16_08__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2023_16_08__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_05_2023_16_08__Changes_1.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_16_05_23__12_09__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_16_05_23__12_09__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_16_05_23__12_09__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_16_05_23__12_09__Changes_1.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_2023_10_35__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_2023_10_35__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_23__11_01__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_23__11_01__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_23__11_17__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_21_03_23__11_17__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/ResultPage.form" beforeDir="false" afterPath="$PROJECT_DIR$/src/ResultPage.form" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/ResultPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/ResultPage.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
Index: src/ResultPage.form
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<form xmlns=\"http://www.intellij.com/uidesigner/form/\" version=\"1\" bind-to-class=\"ResultPage\">\r\n  <grid id=\"27dc6\" layout-manager=\"GridLayoutManager\" row-count=\"4\" column-count=\"1\" same-size-horizontally=\"false\" same-size-vertically=\"false\" hgap=\"-1\" vgap=\"-1\">\r\n    <margin top=\"0\" left=\"0\" bottom=\"0\" right=\"0\"/>\r\n    <constraints>\r\n      <xy x=\"20\" y=\"20\" width=\"1000\" height=\"700\"/>\r\n    </constraints>\r\n    <properties>\r\n      <background color=\"-7122923\"/>\r\n      <foreground color=\"-2829100\"/>\r\n      <maximumSize width=\"1000\" height=\"700\"/>\r\n      <minimumSize width=\"1000\" height=\"700\"/>\r\n      <preferredSize width=\"1000\" height=\"700\"/>\r\n    </properties>\r\n    <border type=\"none\"/>\r\n    <children>\r\n      <component id=\"50023\" class=\"javax.swing.JLabel\">\r\n        <constraints>\r\n          <grid row=\"0\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n        <properties>\r\n          <font name=\"Rubik\" size=\"60\" style=\"1\"/>\r\n          <foreground color=\"-1\"/>\r\n          <text value=\"Risultati\"/>\r\n        </properties>\r\n      </component>\r\n      <grid id=\"2e92d\" layout-manager=\"GridLayoutManager\" row-count=\"1\" column-count=\"2\" same-size-horizontally=\"false\" same-size-vertically=\"false\" hgap=\"-1\" vgap=\"-1\">\r\n        <margin top=\"0\" left=\"0\" bottom=\"0\" right=\"0\"/>\r\n        <constraints>\r\n          <grid row=\"1\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n        <properties>\r\n          <background color=\"-7122923\"/>\r\n        </properties>\r\n        <border type=\"none\"/>\r\n        <children>\r\n          <component id=\"8e937\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"0\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <font name=\"Rubik\" size=\"40\" style=\"1\"/>\r\n              <foreground color=\"-1\"/>\r\n              <text value=\"Parole Trovate\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"36f1d\" class=\"javax.swing.JLabel\">\r\n            <constraints>\r\n              <grid row=\"0\" column=\"1\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"0\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <font name=\"Rubik\" size=\"40\" style=\"1\"/>\r\n              <foreground color=\"-1\"/>\r\n              <text value=\"Parola Migliore\"/>\r\n            </properties>\r\n          </component>\r\n        </children>\r\n      </grid>\r\n      <grid id=\"e130c\" layout-manager=\"GridLayoutManager\" row-count=\"2\" column-count=\"1\" same-size-horizontally=\"false\" same-size-vertically=\"false\" hgap=\"-1\" vgap=\"-1\">\r\n        <margin top=\"0\" left=\"0\" bottom=\"0\" right=\"0\"/>\r\n        <constraints>\r\n          <grid row=\"2\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" indent=\"0\" use-parent-layout=\"false\"/>\r\n        </constraints>\r\n        <properties>\r\n          <background color=\"-7122923\"/>\r\n        </properties>\r\n        <border type=\"none\"/>\r\n        <children>\r\n          <component id=\"14489\" class=\"javax.swing.JButton\" binding=\"button1\" default-binding=\"true\">\r\n            <constraints>\r\n              <grid row=\"0\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <text value=\"Button\"/>\r\n            </properties>\r\n          </component>\r\n          <component id=\"ca908\" class=\"javax.swing.JButton\" binding=\"button2\" default-binding=\"true\">\r\n            <constraints>\r\n              <grid row=\"1\" column=\"0\" row-span=\"1\" col-span=\"1\" vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" indent=\"0\" use-parent-layout=\"false\"/>\r\n            </constraints>\r\n            <properties>\r\n              <text value=\"Button\"/>\r\n            </properties>\r\n          </component>\r\n        </children>\r\n      </grid>\r\n    </children>\r\n  </grid>\r\n</form>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ResultPage.form b/src/ResultPage.form
--- a/src/ResultPage.form	(revision 8616c296bd11b3afad3da09f21ae12a02d9a3aa1)
+++ b/src/ResultPage.form	(date 1684500391734)
@@ -1,12 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="ResultPage">
-  <grid id="27dc6" layout-manager="GridLayoutManager" row-count="4" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+  <grid id="27dc6" layout-manager="GridLayoutManager" row-count="6" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
     <margin top="0" left="0" bottom="0" right="0"/>
     <constraints>
       <xy x="20" y="20" width="1000" height="700"/>
     </constraints>
     <properties>
-      <background color="-7122923"/>
+      <background color="-10998005"/>
       <foreground color="-2829100"/>
       <maximumSize width="1000" height="700"/>
       <minimumSize width="1000" height="700"/>
@@ -27,10 +27,10 @@
       <grid id="2e92d" layout-manager="GridLayoutManager" row-count="1" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
         <margin top="0" left="0" bottom="0" right="0"/>
         <constraints>
-          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+          <grid row="3" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
         </constraints>
         <properties>
-          <background color="-7122923"/>
+          <background color="-10998005"/>
         </properties>
         <border type="none"/>
         <children>
@@ -56,30 +56,109 @@
           </component>
         </children>
       </grid>
-      <grid id="e130c" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+      <grid id="e130c" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+        <margin top="0" left="0" bottom="0" right="0"/>
+        <constraints>
+          <grid row="4" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <autoscrolls value="false"/>
+          <background color="-10998005"/>
+          <font size="18"/>
+          <opaque value="true"/>
+        </properties>
+        <border type="none"/>
+        <children>
+          <component id="14489" class="javax.swing.JButton" binding="retryButton">
+            <constraints>
+              <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
+                <minimum-size width="250" height="50"/>
+                <preferred-size width="250" height="50"/>
+                <maximum-size width="250" height="50"/>
+              </grid>
+            </constraints>
+            <properties>
+              <background color="-11108553"/>
+              <font name="Rubik" size="20" style="1"/>
+              <foreground color="-1"/>
+              <text value="Retry"/>
+            </properties>
+          </component>
+          <component id="ca908" class="javax.swing.JButton" binding="exitButton" default-binding="true">
+            <constraints>
+              <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
+                <minimum-size width="250" height="50"/>
+                <preferred-size width="250" height="50"/>
+                <maximum-size width="250" height="50"/>
+              </grid>
+            </constraints>
+            <properties>
+              <background color="-5297374"/>
+              <font name="Rubik" size="20" style="1"/>
+              <foreground color="-1"/>
+              <text value="Exit"/>
+            </properties>
+          </component>
+        </children>
+      </grid>
+      <grid id="3f835" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
         <margin top="0" left="0" bottom="0" right="0"/>
         <constraints>
           <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
         </constraints>
         <properties>
-          <background color="-7122923"/>
+          <background color="-1"/>
         </properties>
         <border type="none"/>
         <children>
-          <component id="14489" class="javax.swing.JButton" binding="button1" default-binding="true">
+          <component id="bf0c1" class="javax.swing.JLabel">
             <constraints>
-              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
+              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="0" fill="0" indent="0" use-parent-layout="false"/>
             </constraints>
             <properties>
-              <text value="Button"/>
+              <font name="Rubik" size="30" style="1"/>
+              <foreground color="-1"/>
+              <text value="11"/>
             </properties>
           </component>
-          <component id="ca908" class="javax.swing.JButton" binding="button2" default-binding="true">
+          <component id="d7740" class="javax.swing.JLabel">
             <constraints>
-              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
+              <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="0" fill="0" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties>
+              <font name="Rubik" size="30" style="1"/>
+              <foreground color="-1"/>
+              <text value="Ciao"/>
+            </properties>
+          </component>
+          <vspacer id="3092d">
+            <constraints>
+              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false">
+                <minimum-size width="30" height="30"/>
+                <preferred-size width="30" height="30"/>
+                <maximum-size width="30" height="30"/>
+              </grid>
+            </constraints>
+          </vspacer>
+        </children>
+      </grid>
+      <grid id="842a4" layout-manager="GridLayoutManager" row-count="1" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+        <margin top="0" left="0" bottom="0" right="0"/>
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <background color="-10998005"/>
+        </properties>
+        <border type="none"/>
+        <children>
+          <component id="5becf" class="javax.swing.JLabel">
+            <constraints>
+              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
             </constraints>
             <properties>
-              <text value="Button"/>
+              <font name="Rubik" size="35" style="1"/>
+              <text value="Label"/>
             </properties>
           </component>
         </children>
