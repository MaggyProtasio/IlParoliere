Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\nimport java.io.*;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        //Oggetti e variabili\r\n        Dizionario diz = new Dizionario();\r\n        Scanner in = new Scanner(System.in);\r\n        String nickname;\r\n        String parolaInserita = \"\";\r\n        Random rand = new Random();\r\n\r\n        //creazione utente\r\n        System.out.println(\"Benvenuto nel paroliere!\");\r\n        System.out.println(\"Inserisci il nickname\");\r\n        nickname = in.nextLine();\r\n        Utente giocatore = new Utente(nickname);\r\n        Partita partita = new Partita(giocatore);\r\n\r\n        //provaAAAAAAAAAA\r\n        partita.matriceRandomInizio();\r\n        partita.stampaTabellone();\r\n        String[] dizionario = diz.leggiParole();\r\n        partita.inserisciParoleMatrice(dizionario);\r\n        partita.stampaTabellone();\r\n\r\n        //creazione partita\r\n        System.out.println(\"Inzia giocare! Vuoi testare la matrice [1] o parole nel dizionario [2]?\");\r\n        int scelta = in.nextInt();\r\n        in.nextLine();\r\n        if(scelta == 1){\r\n            //parte della matrice\r\n            //prova 1\r\n            partita.creaMatrice();\r\n            partita.stampaMatrice();\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n\r\n            //controllo se parola esiste nella matrice (e anche se è una parola)\r\n            boolean trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n\r\n            //prova 2\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n            //controllo se parola esiste nella matrice\r\n            trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n\r\n            //prova 3\r\n            System.out.println(\"\\nInserisci una parola\");\r\n            parolaInserita = in.nextLine();\r\n            //controllo se parola esiste nella matrice\r\n            trovata = partita.trovaParolaMatrice(parolaInserita);\r\n            if (trovata) {\r\n                System.out.println(\"La parola \" + parolaInserita + \" esiste, brava!\");\r\n            } else {\r\n                System.out.println(\"La parola \" + parolaInserita + \" non esiste nella matrice :(\");\r\n            }\r\n        }else {\r\n\r\n            int i = 0;\r\n            do {\r\n                System.out.println(\"Parola \" + (i + 1) + \" \\nInserisci una parola\");\r\n                parolaInserita = in.nextLine();\r\n                //trova parola\r\n                if (diz.trovaParola(parolaInserita)) {\r\n                    if (partita.doppione(parolaInserita) == false) {\r\n                        System.out.println(\"Parola trovata nel dizionario!\");\r\n                        partita.aggiungiPunti(parolaInserita);\r\n                        System.out.println(\"Punti della parola: \" + partita.puntiParola(parolaInserita));\r\n                        //contatore\r\n                        partita.contaParola();\r\n                    } else {\r\n                        System.out.println(\"Hai già inserito questa parola >:(\");\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Questa parola non esiste nel dizionario >:(\");\r\n                }\r\n                i++;\r\n            } while (i < 5);\r\n            System.out.println(\"Punti della parita: \" + partita.getPuntiTotali());\r\n            System.out.println(\"Parole trovate: \" + partita.getParolaNum());\r\n            //stampa la prima parola inserita migliore\r\n            partita.controllaParolaMigliore();\r\n            System.out.println(\"Parola migliore: \" + partita.getParolaMigliore());\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	
@@ -19,13 +19,6 @@
         Utente giocatore = new Utente(nickname);
         Partita partita = new Partita(giocatore);
 
-        //provaAAAAAAAAAA
-        partita.matriceRandomInizio();
-        partita.stampaTabellone();
-        String[] dizionario = diz.leggiParole();
-        partita.inserisciParoleMatrice(dizionario);
-        partita.stampaTabellone();
-
         //creazione partita
         System.out.println("Inzia giocare! Vuoi testare la matrice [1] o parole nel dizionario [2]?");
         int scelta = in.nextInt();
Index: src/Partita.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Iterator;\r\nimport java.util.Random;\r\nimport java.util.Vector;\r\n\r\npublic class Partita {\r\n    public int puntiTotali;\r\n    public Utente utente;\r\n    public String parolaMigliore;\r\n    public int parolaNum;\r\n\r\n    static char[][] tabellone = new char[6][6];\r\n    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/\r\n\r\n    Vector<String> paroleArray= new Vector<>();\r\n    Vector<String> paroleArray2= new Vector<>();\r\n\r\n    //costruttore\r\n    public Partita(Utente u){\r\n        this.utente = utente;\r\n        this.puntiTotali = 0;\r\n        this.parolaMigliore = null;\r\n    }\r\n\r\n    // getter e setter\r\n    public int getPuntiTotali() {\r\n        return puntiTotali;\r\n    }\r\n    public void setPuntiTotali(int puntiTotali) {\r\n        this.puntiTotali = puntiTotali;\r\n    }\r\n    public Utente getUtente() {\r\n        return utente;\r\n    }\r\n    public void setUtente(Utente utente) {\r\n        this.utente = utente;\r\n    }\r\n    public String getParolaMigliore() {\r\n        return parolaMigliore;\r\n    }\r\n    public void setParolaMigliore(String parolaMigliore) {\r\n        this.parolaMigliore = parolaMigliore;\r\n    }\r\n    public int getParolaNum() {\r\n        return parolaNum;\r\n    }\r\n    public void setParolaNum(int parolaNum) {\r\n        this.parolaNum = parolaNum;\r\n    }\r\n\r\n    //metodi\r\n    public void aggiungiPunti(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        puntiTotali = puntiTotali + punti;\r\n    }\r\n    public boolean controllaParolaMigliore() {\r\n        String best = \"\";\r\n        boolean unique = true;\r\n        Iterator<String> i = paroleArray.iterator();\r\n        while (i.hasNext()) {\r\n            String parola = i.next();\r\n            if (parola.length() > best.length()) {\r\n                best = parola;\r\n                unique = true;\r\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\r\n                unique = false;\r\n            }\r\n        }\r\n        setParolaMigliore(best);\r\n        return unique;\r\n    }\r\n\r\n    public int puntiParola(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        paroleArray.add(parola);\r\n        return punti;\r\n    }\r\n\r\n    public void contaParola(){\r\n        parolaNum++;\r\n    }\r\n\r\n    public boolean doppione(String parolaInserita){\r\n        boolean d = false; //doppione\r\n        int size = paroleArray.size(); //grandezza array\r\n        for(int x=0; x<size; x++){ //ciclo vettore grande\r\n            if(parolaInserita.equals(paroleArray.get(x))){\r\n                d = true;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n\r\n    /*public void inizializzaTabellone(){\r\n        for (int i = 0; i < 6; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                int index = (int) (Math.random() * lettere.length);\r\n                tabellone[i][j] = lettere[index];\r\n            }\r\n        }\r\n    }*/\r\n\r\n    public void stampaTabellone(){\r\n        for (int i = 0; i < 6; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                System.out.print(tabellone[i][j] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    //metodo per creare un vettore inizializato con lettere casuali\r\n    public void matriceRandomInizio(){\r\n        Random rand = new Random();\r\n        // riempimento casuale della matrice con lettere dell'alfabeto\r\n        for (int i = 0; i < tabellone.length; i++) {\r\n            for (int j = 0; j < tabellone[i].length; j++) {\r\n                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo\r\n                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione\r\n    public static boolean canInsertWord(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            // controlla se la posizione è all'interno della matrice\r\n            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {\r\n                return false;\r\n            }\r\n\r\n            // controlla se la posizione è già occupata da un'altra lettera\r\n            if (tabellone[y][x] != '\\u0000' && tabellone[y][x] != word.charAt(i)) {\r\n                System.out.println(\"La posizione (\" + y + \", \" + x + \") è già occupata da \" + tabellone[y][x] + \" e non da \" + word.charAt(i));\r\n                return false;\r\n            }\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // inserisce una parola nella matrice in una determinata posizione e direzione\r\n    public static void inserisciParola(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            tabellone[y][x] = word.charAt(i);\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file\r\n    public void inserisciParoleMatrice(String words[]){\r\n        Random rand = new Random();\r\n        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola\r\n        for (String word : words) {\r\n            boolean inserted = false;\r\n            int tentativi = 0;\r\n            while (!inserted && tentativi < maxTentativi) {\r\n                int row = rand.nextInt(tabellone.length);\r\n                int col = rand.nextInt(tabellone[row].length);\r\n                int dir = rand.nextInt(8);\r\n                if (canInsertWord(word, row, col, dir)) {\r\n                    inserisciParola(word, row, col, dir);\r\n                    inserted = true;\r\n                }\r\n                tentativi++;\r\n            }\r\n            if (!inserted) {\r\n                System.out.println(\"Non è stato possibile inserire la parola \" + word);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*public static void inizializzaMatrice(String[] parole) {\r\n        Random random = new Random();\r\n        int i, j, k;\r\n        for (String parola : parole) {\r\n            if (parola.length() >= 3 && parola.length() <= 6) {\r\n                boolean piazzata = false;\r\n                while (!piazzata) {\r\n                    i = random.nextInt(6);\r\n                    j = random.nextInt(6);\r\n                    k = random.nextInt(8);\r\n                    if (tabellone[i][j] == '\\0') {\r\n                        tabellone[i][j] = parola.charAt(0);\r\n                        int x = i + dx[k];\r\n                        int y = j + dy[k];\r\n                        boolean ok = true;\r\n                        for (int l = 1; l < parola.length(); l++) {\r\n                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {\r\n                                if (tabellone[x][y] == '\\0') {\r\n                                    tabellone[x][y] = parola.charAt(l);\r\n                                    x += dx[k];\r\n                                    y += dy[k];\r\n                                } else {\r\n                                    ok = false;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                ok = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (ok) {\r\n                            Dizionario d = new Dizionario();\r\n                            d.setParola(parola);\r\n                            paroleArray.add(d);\r\n                            piazzata = true;\r\n                        } else {\r\n                            for (int l = 0; l < parola.length(); l++) {\r\n                                if (tabellone[i][j] == parola.charAt(l)) {\r\n                                    tabellone[i][j] = '\\0';\r\n                                }\r\n                                i -= dx[k];\r\n                                j -= dy[k];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Partita.java b/src/Partita.java
--- a/src/Partita.java	
+++ b/src/Partita.java	
@@ -1,24 +1,16 @@
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.Iterator;
-import java.util.Random;
 import java.util.Vector;
+import java.util.Random;
 
 public class Partita {
     public int puntiTotali;
     public Utente utente;
     public String parolaMigliore;
     public int parolaNum;
-
-    static char[][] tabellone = new char[6][6];
-    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
-            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/
+    public char[][] matrice;
 
     Vector<String> paroleArray= new Vector<>();
-    Vector<String> paroleArray2= new Vector<>();
 
     //costruttore
     public Partita(Utente u){
@@ -53,6 +45,14 @@
         this.parolaNum = parolaNum;
     }
 
+    public char[][] getMatrice() {
+        return matrice;
+    }
+
+    public void setMatrice(char[][] matrice) {
+        this.matrice = matrice;
+    }
+
     //metodi
     public void aggiungiPunti(String parola){
         int lunghezzaParola = parola.length();
@@ -100,184 +100,185 @@
         return d;
     }
 
-    /*public void inizializzaTabellone(){
-        for (int i = 0; i < 6; i++) {
-            for (int j = 0; j < 6; j++) {
-                int index = (int) (Math.random() * lettere.length);
-                tabellone[i][j] = lettere[index];
-            }
-        }
-    }*/
+    public void creaMatrice(String[] words){
+        //String[] words = {"CASA", "AMORE", "TEMPO", "SOLE", "VITA", "BELLO", "GIORNO", "MARE", "AMICO", "BUONO"};
+        String[] wordsInject = new String[10];      //iniettiamo 10 parole nel paroliere
 
-    public void stampaTabellone(){
-        for (int i = 0; i < 6; i++) {
-            for (int j = 0; j < 6; j++) {
-                System.out.print(tabellone[i][j] + " ");
-            }
-            System.out.println();
-        }
-    }
-
-    //metodo per creare un vettore inizializato con lettere casuali
-    public void matriceRandomInizio(){
-        Random rand = new Random();
-        // riempimento casuale della matrice con lettere dell'alfabeto
-        for (int i = 0; i < tabellone.length; i++) {
-            for (int j = 0; j < tabellone[i].length; j++) {
-                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo
-                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));
-            }
-        }
-    }
-
-    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione
-    public static boolean canInsertWord(String word, int row, int col, int dir) {
-        int dx = 0;
-        int dy = 0;
-        if (dir == 0) {
-            dy = 1;
-        } else if (dir == 1) {
-            dx = 1;
-            dy = 1;
-        } else if (dir == 2) {
-            dx = 1;
-        } else if (dir == 3) {
-            dx = 1;
-            dy = -1;
-        } else if (dir == 4) {
-            dy = -1;
-        } else if (dir == 5) {
-            dx = -1;
-            dy = -1;
-        } else if (dir == 6) {
-            dx = -1;
-        } else if (dir == 7) {
-            dx = -1;
-            dy = 1;
-        }
-        int x = col;
-        int y = row;
-        for (int i = 0; i < word.length(); i++) {
-            // controlla se la posizione è all'interno della matrice
-            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {
-                return false;
-            }
-
-            // controlla se la posizione è già occupata da un'altra lettera
-            if (tabellone[y][x] != '\u0000' && tabellone[y][x] != word.charAt(i)) {
-                System.out.println("La posizione (" + y + ", " + x + ") è già occupata da " + tabellone[y][x] + " e non da " + word.charAt(i));
-                return false;
-            }
-            x += dx;
-            y += dy;
-        }
-        return true;
-    }
-    
-    // inserisce una parola nella matrice in una determinata posizione e direzione
-    public static void inserisciParola(String word, int row, int col, int dir) {
-        int dx = 0;
-        int dy = 0;
-        if (dir == 0) {
-            dy = 1;
-        } else if (dir == 1) {
-            dx = 1;
-            dy = 1;
-        } else if (dir == 2) {
-            dx = 1;
-        } else if (dir == 3) {
-            dx = 1;
-            dy = -1;
-        } else if (dir == 4) {
-            dy = -1;
-        } else if (dir == 5) {
-            dx = -1;
-            dy = -1;
-        } else if (dir == 6) {
-            dx = -1;
-        } else if (dir == 7) {
-            dx = -1;
-            dy = 1;
-        }
-        int x = col;
-        int y = row;
-        for (int i = 0; i < word.length(); i++) {
-            tabellone[y][x] = word.charAt(i);
-            x += dx;
-            y += dy;
-        }
-    }
-
-    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file
-    public void inserisciParoleMatrice(String words[]){
-        Random rand = new Random();
-        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola
-        for (String word : words) {
-            boolean inserted = false;
-            int tentativi = 0;
-            while (!inserted && tentativi < maxTentativi) {
-                int row = rand.nextInt(tabellone.length);
-                int col = rand.nextInt(tabellone[row].length);
-                int dir = rand.nextInt(8);
-                if (canInsertWord(word, row, col, dir)) {
-                    inserisciParola(word, row, col, dir);
-                    inserted = true;
-                }
-                tentativi++;
-            }
-            if (!inserted) {
-                System.out.println("Non è stato possibile inserire la parola " + word);
-            }
-        }
-    }
-
-    /*public static void inizializzaMatrice(String[] parole) {
+        char[][] matrix = new char[10][10];
         Random random = new Random();
-        int i, j, k;
-        for (String parola : parole) {
-            if (parola.length() >= 3 && parola.length() <= 6) {
-                boolean piazzata = false;
-                while (!piazzata) {
-                    i = random.nextInt(6);
-                    j = random.nextInt(6);
-                    k = random.nextInt(8);
-                    if (tabellone[i][j] == '\0') {
-                        tabellone[i][j] = parola.charAt(0);
-                        int x = i + dx[k];
-                        int y = j + dy[k];
-                        boolean ok = true;
-                        for (int l = 1; l < parola.length(); l++) {
-                            if (x >= 0 && x < 6 && y >= 0 && y < 6) {
-                                if (tabellone[x][y] == '\0') {
-                                    tabellone[x][y] = parola.charAt(l);
-                                    x += dx[k];
-                                    y += dy[k];
-                                } else {
-                                    ok = false;
-                                    break;
-                                }
-                            } else {
-                                ok = false;
-                                break;
-                            }
-                        }
-                        if (ok) {
-                            Dizionario d = new Dizionario();
-                            d.setParola(parola);
-                            paroleArray.add(d);
-                            piazzata = true;
-                        } else {
-                            for (int l = 0; l < parola.length(); l++) {
-                                if (tabellone[i][j] == parola.charAt(l)) {
-                                    tabellone[i][j] = '\0';
-                                }
-                                i -= dx[k];
-                                j -= dy[k];
-                            }
-                        }
+
+        int contParole = 0;
+        boolean parolaGood = false;
+
+        for (int i = 0; i < 10; i++){
+            do {
+                //controlliamo che parole random dal dizionario ha lunghezza minore di 10
+                if(words[random.nextInt(661563)].length() <= 10){
+                    contParole++;
+                    parolaGood = true;
+                }else{
+                    random = new Random();
+                }
+            }while(!parolaGood);
+            wordsInject[i] = words[random.nextInt(661563)];
+
+        }
+
+        // Insert Italian words horizontally
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10);
+            int col = random.nextInt(10 - wordLength + 1);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row][col + j] = word.charAt(j);
+            }
+        }
+
+        // Insert Italian words vertically
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10 - wordLength + 1);
+            int col = random.nextInt(10);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row + j][col] = word.charAt(j);
+            }
+        }
+
+        // Insert Italian words diagonally
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10 - wordLength + 1);
+            int col = random.nextInt(10 - wordLength + 1);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row + j][col + j] = word.charAt(j);
+            }
+        }
+
+
+        // Fill remaining empty slots with random letters
+        for (int i = 0; i < 10; i++) {
+            for (int j = 0; j < 10; j++) {
+                if (matrix[i][j] == '\u0000') {
+                    matrix[i][j] = (char) (random.nextInt(26) + 'A');
+                }
+            }
+        }
+
+        this.matrice = matrix;
+
+    }
+
+    public void stampaMatrice(){
+        for (int i = 0; i < this.matrice.length; i++) {
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.print("┌───┐\t"); // Top border
+            }
+            System.out.println();
+
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.printf("│ %c │\t", this.matrice[i][j]); // Cell content
+            }
+            System.out.println();
+
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.print("└───┘\t"); // Bottom border
+            }
+            System.out.println();
+        }
+    }
+
+    public boolean trovaParolaMatrice(String word) {
+        char[][] matrix = this.matrice;
+        int rows = matrix.length;
+        int cols = matrix[0].length;
+        int wordLength = word.length();
+
+        // Check horizontally
+        for (int i = 0; i < rows; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check vertically
+        for (int i = 0; i <= rows - wordLength; i++) {
+            for (int j = 0; j < cols; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i + k][j] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check diagonally (top-left to bottom-right)
+        for (int i = 0; i <= rows - wordLength; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i + k][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
                     }
                 }
-            }
-        }
-    }*/
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check diagonally (bottom-left to top-right)
+        for (int i = wordLength - 1; i < rows; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i - k][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+
+    private boolean checkWord(char[][] matrix, String word, int row, int col, int rowStep, int colStep) {
+        int wordLength = word.length();
+        for (int i = 0; i < wordLength; i++) {
+            if (row < 0 || row >= matrix.length || col < 0 || col >= matrix[0].length ||
+                    matrix[row][col] != word.charAt(i)) {
+                return false;
+            }
+            row += rowStep;
+            col += colStep;
+        }
+        return true;
+    }
+
+
 }
