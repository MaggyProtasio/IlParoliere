Index: src/Partita.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Iterator;\r\nimport java.util.Random;\r\nimport java.util.Vector;\r\n\r\npublic class Partita {\r\n    public int puntiTotali;\r\n    public Utente utente;\r\n    public String parolaMigliore;\r\n    public int parolaNum;\r\n\r\n    static char[][] tabellone = new char[7][7];\r\n    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/\r\n\r\n    Vector<String> paroleArray= new Vector<>();\r\n    Vector<String> paroleArray2= new Vector<>();\r\n\r\n    //costruttore\r\n    public Partita(Utente u){\r\n        this.utente = utente;\r\n        this.puntiTotali = 0;\r\n        this.parolaMigliore = null;\r\n    }\r\n\r\n    // getter e setter\r\n    public int getPuntiTotali() {\r\n        return puntiTotali;\r\n    }\r\n    public void setPuntiTotali(int puntiTotali) {\r\n        this.puntiTotali = puntiTotali;\r\n    }\r\n    public Utente getUtente() {\r\n        return utente;\r\n    }\r\n    public void setUtente(Utente utente) {\r\n        this.utente = utente;\r\n    }\r\n    public String getParolaMigliore() {\r\n        return parolaMigliore;\r\n    }\r\n    public void setParolaMigliore(String parolaMigliore) {\r\n        this.parolaMigliore = parolaMigliore;\r\n    }\r\n    public int getParolaNum() {\r\n        return parolaNum;\r\n    }\r\n    public void setParolaNum(int parolaNum) {\r\n        this.parolaNum = parolaNum;\r\n    }\r\n\r\n    //metodi\r\n    public void aggiungiPunti(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        puntiTotali = puntiTotali + punti;\r\n    }\r\n    public boolean controllaParolaMigliore() {\r\n        String best = \"\";\r\n        boolean unique = true;\r\n        Iterator<String> i = paroleArray.iterator();\r\n        while (i.hasNext()) {\r\n            String parola = i.next();\r\n            if (parola.length() > best.length()) {\r\n                best = parola;\r\n                unique = true;\r\n            } else if (parola.length() == best.length() && !parola.equals(best)) {\r\n                unique = false;\r\n            }\r\n        }\r\n        setParolaMigliore(best);\r\n        return unique;\r\n    }\r\n\r\n    public int puntiParola(String parola){\r\n        int lunghezzaParola = parola.length();\r\n        int k = 100;            //costante\r\n        int punti = lunghezzaParola * k;\r\n        paroleArray.add(parola);\r\n        return punti;\r\n    }\r\n\r\n    public void contaParola(){\r\n        parolaNum++;\r\n    }\r\n\r\n    public boolean doppione(String parolaInserita){\r\n        boolean d = false; //doppione\r\n        int size = paroleArray.size(); //grandezza array\r\n        for(int x=0; x<size; x++){ //ciclo vettore grande\r\n            if(parolaInserita.equals(paroleArray.get(x))){\r\n                d = true;\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n\r\n    //metodo per creare un vettore inizializato con lettere casuali\r\n    public void matriceRandomInizio(){\r\n        Random rand = new Random();\r\n        // riempimento casuale della matrice con lettere dell'alfabeto\r\n        for (int i = 0; i < tabellone.length; i++) {\r\n            for (int j = 0; j < tabellone[i].length; j++) {\r\n                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo\r\n                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));\r\n            }\r\n        }\r\n    }\r\n\r\n    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione\r\n    public static boolean canInsertWord(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            // controlla se la posizione è all'interno della matrice\r\n            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {\r\n                return false;\r\n            }\r\n\r\n            // controlla se la posizione è già occupata da un'altra lettera\r\n            if (tabellone[y][x] != '\\u0000' && tabellone[y][x] != word.charAt(i)) {\r\n                System.out.println(\"La posizione (\" + y + \", \" + x + \") è già occupata da \" + tabellone[y][x] + \" e non da \" + word.charAt(i));\r\n                return false;\r\n            }\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // inserisce una parola nella matrice in una determinata posizione e direzione\r\n    public static void inserisciParola(String word, int row, int col, int dir) {\r\n        int dx = 0;\r\n        int dy = 0;\r\n        if (dir == 0) {\r\n            dy = 1;\r\n        } else if (dir == 1) {\r\n            dx = 1;\r\n            dy = 1;\r\n        } else if (dir == 2) {\r\n            dx = 1;\r\n        } else if (dir == 3) {\r\n            dx = 1;\r\n            dy = -1;\r\n        } else if (dir == 4) {\r\n            dy = -1;\r\n        } else if (dir == 5) {\r\n            dx = -1;\r\n            dy = -1;\r\n        } else if (dir == 6) {\r\n            dx = -1;\r\n        } else if (dir == 7) {\r\n            dx = -1;\r\n            dy = 1;\r\n        }\r\n        int x = col;\r\n        int y = row;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            tabellone[y][x] = word.charAt(i);\r\n            x += dx;\r\n            y += dy;\r\n        }\r\n    }\r\n\r\n    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file\r\n    public void inserisciParoleMatrice(String words[]){\r\n        Random rand = new Random();\r\n        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola\r\n        for (String word : words) {\r\n            boolean inserted = false;\r\n            int tentativi = 0;\r\n            while (!inserted && tentativi < maxTentativi) {\r\n                int row = rand.nextInt(tabellone.length);\r\n                int col = rand.nextInt(tabellone[row].length);\r\n                int dir = rand.nextInt(8);\r\n                if (canInsertWord(word, row, col, dir)) {\r\n                    inserisciParola(word, row, col, dir);\r\n                    inserted = true;\r\n                }\r\n                tentativi++;\r\n            }\r\n            if (!inserted) {\r\n                System.out.println(\"Non è stato possibile inserire la parola \" + word);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Partita.java b/src/Partita.java
--- a/src/Partita.java	
+++ b/src/Partita.java	
@@ -1,24 +1,16 @@
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.Iterator;
-import java.util.Random;
 import java.util.Vector;
+import java.util.Random;
 
 public class Partita {
     public int puntiTotali;
     public Utente utente;
     public String parolaMigliore;
     public int parolaNum;
-
-    static char[][] tabellone = new char[7][7];
-    /*char[] lettere = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
-            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};*/
+    public char[][] matrice;
 
     Vector<String> paroleArray= new Vector<>();
-    Vector<String> paroleArray2= new Vector<>();
 
     //costruttore
     public Partita(Utente u){
@@ -53,6 +45,14 @@
         this.parolaNum = parolaNum;
     }
 
+    public char[][] getMatrice() {
+        return matrice;
+    }
+
+    public void setMatrice(char[][] matrice) {
+        this.matrice = matrice;
+    }
+
     //metodi
     public void aggiungiPunti(String parola){
         int lunghezzaParola = parola.length();
@@ -100,117 +100,179 @@
         return d;
     }
 
-    //metodo per creare un vettore inizializato con lettere casuali
-    public void matriceRandomInizio(){
-        Random rand = new Random();
-        // riempimento casuale della matrice con lettere dell'alfabeto
-        for (int i = 0; i < tabellone.length; i++) {
-            for (int j = 0; j < tabellone[i].length; j++) {
-                // genero valore casuale tra 'a' e 'z' e lo metto in maiuscolo
-                tabellone[i][j] = Character.toUpperCase((char) (rand.nextInt(26) + 'a'));
+    public void creaMatrice(String[] words){
+
+
+        char[][] matrix = new char[10][10];
+        Random random = new Random();
+        String[] wordsInject = new String[10];
+
+        // Populate wordsInject array with 10 words of length 10 or less
+        for (int i = 0; i < wordsInject.length; i++) {
+            String randomWord;
+            do {
+                int randomIndex = random.nextInt(words.length);
+                randomWord = words[randomIndex];
+            } while (randomWord.length() > 10);
+            wordsInject[i] = randomWord;
+            System.out.println("parola added - " + wordsInject[i]);
+        }
+
+        // Insert Italian words horizontally
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10);
+            int col = random.nextInt(10 - wordLength + 1);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row][col + j] = word.charAt(j);
             }
         }
-    }
+
+        // Insert Italian words vertically
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10 - wordLength + 1);
+            int col = random.nextInt(10);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row + j][col] = word.charAt(j);
+            }
+        }
 
-    // controlla se è possibile inserire una parola nella matrice in una determinata posizione e direzione
-    public static boolean canInsertWord(String word, int row, int col, int dir) {
-        int dx = 0;
-        int dy = 0;
-        if (dir == 0) {
-            dy = 1;
-        } else if (dir == 1) {
-            dx = 1;
-            dy = 1;
-        } else if (dir == 2) {
-            dx = 1;
-        } else if (dir == 3) {
-            dx = 1;
-            dy = -1;
-        } else if (dir == 4) {
-            dy = -1;
-        } else if (dir == 5) {
-            dx = -1;
-            dy = -1;
-        } else if (dir == 6) {
-            dx = -1;
-        } else if (dir == 7) {
-            dx = -1;
-            dy = 1;
-        }
-        int x = col;
-        int y = row;
-        for (int i = 0; i < word.length(); i++) {
-            // controlla se la posizione è all'interno della matrice
-            if (x < 0 || x >= tabellone[0].length || y < 0 || y >= tabellone.length) {
-                return false;
-            }
+        // Insert Italian words diagonally
+        for (int i = 0; i < wordsInject.length; i++) {
+            String word = wordsInject[i];
+            int wordLength = word.length();
+            int row = random.nextInt(10 - wordLength + 1);
+            int col = random.nextInt(10 - wordLength + 1);
+
+            for (int j = 0; j < wordLength; j++) {
+                matrix[row + j][col + j] = word.charAt(j);
+            }
+        }
+
+
+        // Fill remaining empty slots with random letters
+        for (int i = 0; i < 10; i++) {
+            for (int j = 0; j < 10; j++) {
+                if (matrix[i][j] == '\u0000') {
+                    matrix[i][j] = (char) (random.nextInt(26) + 'A');
+                }
+            }
+        }
+
+        this.matrice = matrix;
+
+    }
+
+    public void stampaMatrice(){
+        for (int i = 0; i < this.matrice.length; i++) {
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.print("┌───┐\t"); // Top border
+            }
+            System.out.println();
+
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.printf("│ %c │\t", this.matrice[i][j]); // Cell content
+            }
+            System.out.println();
+
+            for (int j = 0; j < this.matrice[i].length; j++) {
+                System.out.print("└───┘\t"); // Bottom border
+            }
+            System.out.println();
+        }
+    }
+
+    public boolean trovaParolaMatrice(String word) {
+        char[][] matrix = this.matrice;
+        int rows = matrix.length;
+        int cols = matrix[0].length;
+        int wordLength = word.length();
+
+        // Check horizontally
+        for (int i = 0; i < rows; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check vertically
+        for (int i = 0; i <= rows - wordLength; i++) {
+            for (int j = 0; j < cols; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i + k][j] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check diagonally (top-left to bottom-right)
+        for (int i = 0; i <= rows - wordLength; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i + k][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        // Check diagonally (bottom-left to top-right)
+        for (int i = wordLength - 1; i < rows; i++) {
+            for (int j = 0; j <= cols - wordLength; j++) {
+                boolean found = true;
+                for (int k = 0; k < wordLength; k++) {
+                    if (matrix[i - k][j + k] != word.charAt(k)) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
 
-            // controlla se la posizione è già occupata da un'altra lettera
-            if (tabellone[y][x] != '\u0000' && tabellone[y][x] != word.charAt(i)) {
-                System.out.println("La posizione (" + y + ", " + x + ") è già occupata da " + tabellone[y][x] + " e non da " + word.charAt(i));
+
+    private boolean checkWord(char[][] matrix, String word, int row, int col, int rowStep, int colStep) {
+        int wordLength = word.length();
+        for (int i = 0; i < wordLength; i++) {
+            if (row < 0 || row >= matrix.length || col < 0 || col >= matrix[0].length ||
+                    matrix[row][col] != word.charAt(i)) {
                 return false;
             }
-            x += dx;
-            y += dy;
+            row += rowStep;
+            col += colStep;
         }
         return true;
     }
-    
-    // inserisce una parola nella matrice in una determinata posizione e direzione
-    public static void inserisciParola(String word, int row, int col, int dir) {
-        int dx = 0;
-        int dy = 0;
-        if (dir == 0) {
-            dy = 1;
-        } else if (dir == 1) {
-            dx = 1;
-            dy = 1;
-        } else if (dir == 2) {
-            dx = 1;
-        } else if (dir == 3) {
-            dx = 1;
-            dy = -1;
-        } else if (dir == 4) {
-            dy = -1;
-        } else if (dir == 5) {
-            dx = -1;
-            dy = -1;
-        } else if (dir == 6) {
-            dx = -1;
-        } else if (dir == 7) {
-            dx = -1;
-            dy = 1;
-        }
-        int x = col;
-        int y = row;
-        for (int i = 0; i < word.length(); i++) {
-            tabellone[y][x] = word.charAt(i);
-            x += dx;
-            y += dy;
-        }
-    }
 
-    //metodo per inserire parole dentro la matrice da un array che ha nomi presi dal file
-    public void inserisciParoleMatrice(String words[]){
-        Random rand = new Random();
-        int maxTentativi = 10; // Numero massimo di tentativi per ogni parola
-        for (String word : words) {
-            boolean inserted = false;
-            int tentativi = 0;
-            while (!inserted && tentativi < maxTentativi) {
-                int row = rand.nextInt(tabellone.length);
-                int col = rand.nextInt(tabellone[row].length);
-                int dir = rand.nextInt(8);
-                if (canInsertWord(word, row, col, dir)) {
-                    inserisciParola(word, row, col, dir);
-                    inserted = true;
-                }
-                tentativi++;
-            }
-            if (!inserted) {
-                System.out.println("Non è stato possibile inserire la parola " + word);
-            }
-        }
-    }
 
 }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1/shelved.patch	
+++ /dev/null	
@@ -1,29 +0,0 @@
-Index: src/StartPage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class StartPage extends JFrame {\r\n    private JPanel panelMain;\r\n    private JButton startButton;\r\n    private JLabel image;\r\n    private JTextField nomeBox;\r\n    private JPanel panelNome;\r\n    JFrame frameStartPage;\r\n\r\n    //costruttore\r\n    public StartPage(){\r\n        //intialize();\r\n        startButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                JOptionPane.showMessageDialog(startButton, \"Hello \" + nomeBox.getText() );\r\n            }\r\n        });\r\n    }\r\n\r\n    //costruttore\r\n    public static void main(String[] args) {\r\n        StartPage s = new StartPage();\r\n        s.setResizable(false);\r\n        s.setContentPane(s.panelMain);\r\n        s.setTitle(\"Start\");\r\n        s.setSize(760,510);\r\n        s.setLocationRelativeTo(null);\r\n        s.setVisible(true);\r\n        s.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    }\r\n\r\n    private void intialize(){\r\n        frameStartPage = new JFrame();\r\n        frameStartPage.setBounds(100, 100, 795, 395);\r\n        frameStartPage.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        panelMain = new JPanel(); // initialize panel1\r\n        frameStartPage.getContentPane().add(panelMain); // add panel1 to the content pane\r\n        panelMain.setLayout(null); // set the layout manager of panel1 to null\r\n    }\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/StartPage.java b/src/StartPage.java
---- a/src/StartPage.java	
-+++ b/src/StartPage.java	
-@@ -32,17 +32,5 @@
-         s.setVisible(true);
-         s.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-     }
--
--    private void intialize(){
--        frameStartPage = new JFrame();
--        frameStartPage.setBounds(100, 100, 795, 395);
--        frameStartPage.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
--
--        panelMain = new JPanel(); // initialize panel1
--        frameStartPage.getContentPane().add(panelMain); // add panel1 to the content pane
--        panelMain.setLayout(null); // set the layout manager of panel1 to null
--    }
--
--
--
-+    
- }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44__Changes_1.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1" date="1683297901541" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_44_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 05/05/2023 16:44 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1/shelved.patch	
+++ /dev/null	
@@ -1,29 +0,0 @@
-Index: src/StartPage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class StartPage extends JFrame {\r\n    private JPanel panelMain;\r\n    private JButton startButton;\r\n    private JLabel image;\r\n    private JTextField nomeBox;\r\n    private JPanel panelNome;\r\n    JFrame frameStartPage;\r\n\r\n    //costruttore\r\n    public StartPage(){\r\n        //intialize();\r\n        startButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                JOptionPane.showMessageDialog(startButton, \"Hello \" + nomeBox.getText() );\r\n            }\r\n        });\r\n    }\r\n\r\n    //costruttore\r\n    public static void main(String[] args) {\r\n        StartPage s = new StartPage();\r\n        s.setResizable(false);\r\n        s.setContentPane(s.panelMain);\r\n        s.setTitle(\"Start\");\r\n        s.setSize(760,510);\r\n        s.setLocationRelativeTo(null);\r\n        s.setVisible(true);\r\n        s.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    }\r\n\r\n    private void intialize(){\r\n        frameStartPage = new JFrame();\r\n        frameStartPage.setBounds(100, 100, 795, 395);\r\n        frameStartPage.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        panelMain = new JPanel(); // initialize panel1\r\n        frameStartPage.getContentPane().add(panelMain); // add panel1 to the content pane\r\n        panelMain.setLayout(null); // set the layout manager of panel1 to null\r\n    }\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/StartPage.java b/src/StartPage.java
---- a/src/StartPage.java	
-+++ b/src/StartPage.java	
-@@ -32,17 +32,5 @@
-         s.setVisible(true);
-         s.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-     }
--
--    private void intialize(){
--        frameStartPage = new JFrame();
--        frameStartPage.setBounds(100, 100, 795, 395);
--        frameStartPage.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
--
--        panelMain = new JPanel(); // initialize panel1
--        frameStartPage.getContentPane().add(panelMain); // add panel1 to the content pane
--        panelMain.setLayout(null); // set the layout manager of panel1 to null
--    }
--
--
--
-+    
- }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39__Changes_1.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1" date="1683297567698" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2023_16_39_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 05/05/2023 16:39 [Changes]" />
-</changelist>
\ No newline at end of file
